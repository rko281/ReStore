| package |
package := Package name: 'SSW ReStore Collections'.
package paxVersion: 1;
	basicComment: 'ReStore
©2019 John Aspinall
https://github.com/rko281/ReStore'.


package classNames
	add: #SSWDBArrayedStaticCollectionSpec;
	add: #SSWDBCacheDictionaryEntry;
	add: #SSWDBCacheDictionaryWrapper;
	add: #SSWDBCollectionAddition;
	add: #SSWDBCollectionChange;
	add: #SSWDBCollectionEntry;
	add: #SSWDBCollectionRemoval;
	add: #SSWDBCollectionRemovalWithKey;
	add: #SSWDBCollectionSpec;
	add: #SSWDBCollectionUpdate;
	add: #SSWDBGeneralCollectionSpec;
	add: #SSWDBHashedStaticCollectionSpec;
	add: #SSWDBKeyedCollectionEntry;
	add: #SSWDBKeyedStaticCollectionSpec;
	add: #SSWDBMultiValueCacheDictionaryEntry;
	add: #SSWDBMultiValueCacheDictionaryWrapper;
	add: #SSWDBOrderedStaticCollectionSpec;
	add: #SSWDBOwnedCacheDictionarySpec;
	add: #SSWDBOwnedCollectionSpec;
	add: #SSWDBOwnedMultiValueCacheDictionarySpec;
	add: #SSWDBSortedOwnedCollectionSpec;
	add: #SSWDBSortedStaticCollectionSpec;
	add: #SSWDBStaticCacheDictionarySpec;
	add: #SSWDBStaticCollectionSpec;
	add: #SSWDBStaticDictionarySpec;
	add: #SSWDBStaticIdentitySetSpec;
	add: #SSWDBStaticMultiValueCacheDictionarySpec;
	yourself.

package methodNames
	add: #ArrayedCollection -> #_dbAdd:suggestedIndex:;
	add: #ArrayedCollection -> #staticCollectionSpecClass;
	add: #Class -> #beKeyClassOf:;
	add: #Class -> #beTargetClassOf:;
	add: #Collection -> #_dbAdd:;
	add: #Collection -> #_dbAdd:suggestedIndex:;
	add: #Collection -> #_fetchAll:;
	add: #Collection -> #_proxifyIn:;
	add: #Collection -> #fetch:;
	add: #Collection -> #fetchAll:;
	add: #Collection -> #isOrdered;
	add: #Collection -> #isValidForPersistence;
	add: #Collection -> #of:;
	add: #Collection -> #of:owner:;
	add: #Collection -> #of:specClass:;
	add: #Collection -> #orRemote;
	add: #Collection -> #ownedCollectionSpecClass;
	add: #Collection -> #remote;
	add: #Collection -> #staticCollectionSpecClass;
	add: #Dictionary -> #_dbAdd:suggestedIndex:;
	add: #Dictionary -> #of:;
	add: #Dictionary -> #of:keyClass:;
	add: #Dictionary -> #of:keyedOn:;
	add: #Dictionary -> #of:owner:;
	add: #Dictionary -> #of:owner:keyedOn:;
	add: #Dictionary -> #ownedCacheDictionarySpecClass;
	add: #Dictionary -> #ownedMultiValueCacheDictionarySpecClass;
	add: #Dictionary -> #staticCacheDictionarySpecClass;
	add: #Dictionary -> #staticCollectionSpecClass;
	add: #Dictionary -> #staticDictionarySpecClass;
	add: #Dictionary -> #staticMultiValueCacheDictionarySpecClass;
	add: #IdentitySet -> #staticCollectionSpecClass;
	add: #SequenceableCollection -> #isOrdered;
	add: #SequenceableCollection -> #staticCollectionSpecClass;
	add: #Set -> #staticCollectionSpecClass;
	add: #SortedCollection -> #_dbAdd:;
	add: #SortedCollection -> #orderingSpecsFor:in:;
	add: #SortedCollection -> #ownedCollectionSpecClass;
	add: #SortedCollection -> #staticCollectionSpecClass;
	add: #SSWDBDependentWrapper -> #beKeyClassOf:;
	add: #SSWDBDependentWrapper -> #beTargetClassOf:;
	add: #SSWDBRelatedWrapper -> #beKeyClassOf:;
	add: #SSWDBRelatedWrapper -> #beTargetClassOf:;
	add: #SSWDBUnrelatedWrapper -> #beKeyClassOf:;
	add: #SSWDBUnrelatedWrapper -> #beTargetClassOf:;
	add: 'Collection class' -> #of:;
	add: 'Collection class' -> #of:owner:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'SSW ReStore Base Additions'
	'SSW ReStore SQL Entities'
	'SSW ReStore SQL Queries'
	'SSW ReStore Tables').

package!

"Class Definitions"!

Object subclass: #SSWDBCacheDictionaryWrapper
	instanceVariableNames: 'dictionary keyAccessor'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #SSWDBCollectionChange
	instanceVariableNames: 'affectedEntry'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #SSWDBCollectionEntry
	instanceVariableNames: 'table entryID sourceID target'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCacheDictionaryWrapper subclass: #SSWDBMultiValueCacheDictionaryWrapper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCollectionChange subclass: #SSWDBCollectionAddition
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCollectionChange subclass: #SSWDBCollectionRemoval
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCollectionChange subclass: #SSWDBCollectionUpdate
	instanceVariableNames: 'newTarget'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCollectionRemoval subclass: #SSWDBCollectionRemovalWithKey
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCollectionEntry subclass: #SSWDBCacheDictionaryEntry
	instanceVariableNames: 'keyAccessor'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCollectionEntry subclass: #SSWDBKeyedCollectionEntry
	instanceVariableNames: 'index'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCacheDictionaryEntry subclass: #SSWDBMultiValueCacheDictionaryEntry
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBTableComponent subclass: #SSWDBCollectionSpec
	instanceVariableNames: 'templateCollection isValueDependent isValueRelated readStatement refreshStatement refreshWithContentsIfUpdatedStatement deleteStatement'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCollectionSpec subclass: #SSWDBGeneralCollectionSpec
	instanceVariableNames: 'sourceField targetField collectionTable'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCollectionSpec subclass: #SSWDBOwnedCollectionSpec
	instanceVariableNames: 'targetClass ownerField ownerAccessor orderingSpecs'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBGeneralCollectionSpec subclass: #SSWDBStaticCollectionSpec
	instanceVariableNames: 'targetClass deleteEntriesStatement'
	classVariableNames: 'NilCookie'
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBStaticCollectionSpec subclass: #SSWDBHashedStaticCollectionSpec
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBStaticCollectionSpec subclass: #SSWDBKeyedStaticCollectionSpec
	instanceVariableNames: 'indexField updateTargetStatement'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBStaticCollectionSpec subclass: #SSWDBSortedStaticCollectionSpec
	instanceVariableNames: 'orderingSpecs'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBHashedStaticCollectionSpec subclass: #SSWDBStaticCacheDictionarySpec
	instanceVariableNames: 'keyAccessor'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBHashedStaticCollectionSpec subclass: #SSWDBStaticIdentitySetSpec
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBStaticCacheDictionarySpec subclass: #SSWDBStaticMultiValueCacheDictionarySpec
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBKeyedStaticCollectionSpec subclass: #SSWDBOrderedStaticCollectionSpec
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBKeyedStaticCollectionSpec subclass: #SSWDBStaticDictionarySpec
	instanceVariableNames: 'keyClass isKeyDependent isKeyRelated keyTableForRead keyTableForRefresh deleteKeysStatement'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBOrderedStaticCollectionSpec subclass: #SSWDBArrayedStaticCollectionSpec
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBOwnedCollectionSpec subclass: #SSWDBOwnedCacheDictionarySpec
	instanceVariableNames: 'keyAccessor'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBOwnedCollectionSpec subclass: #SSWDBSortedOwnedCollectionSpec
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBOwnedCacheDictionarySpec subclass: #SSWDBOwnedMultiValueCacheDictionarySpec
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!ArrayedCollection methodsFor!

_dbAdd: anObject suggestedIndex: anInteger

	"Translate to at:put:"

	^self at: anInteger put: anObject

!

staticCollectionSpecClass 

	^SSWDBArrayedStaticCollectionSpec

! !
!ArrayedCollection categoriesForMethods!
_dbAdd:suggestedIndex:!adding!private! !
staticCollectionSpecClass!constants!private! !
!

!Class methodsFor!

beKeyClassOf: aCollectionSpec

	"The receiver has been specified as the class of objects which are the keys 
	of the collection specified by aCollectionSpec.
	Initialize aCollectionSpec accordingly"

	aCollectionSpec keyClass: self!

beTargetClassOf: aCollectionSpec

	"The receiver has been specified as the class of objects held in 
	the collection specified by aCollectionSpec.
	Initialize aCollectionSpec accordingly"

	aCollectionSpec targetClass: self! !
!Class categoriesForMethods!
beKeyClassOf:!accessing!public! !
beTargetClassOf:!accessing!public! !
!

!Collection methodsFor!

_dbAdd: anObject

	"For use when instantiating a collection from the database.
	Normally the same as add: but see SortedCollection implementation"

	^self add: anObject!

_dbAdd: anObject suggestedIndex: anInteger

	"Add anObject to the receiver, possibly at the index anInteger.
	The suggestedIndex is only required by keyed collections so defer to just _dbAdd:"

	^self _dbAdd: anObject!

_fetchAll: aCollection

	"Private - ReStore - for each element of the receiver, use a single query (ideally, or multiple batched queries if the receiver's size is too large for the readAll batch size)
	to fetch from the database the components in the inst vars named in aCollection"

	| any reStore table |

	self isEmpty ifTrue: [^self].
	any := self anyOne. 
	reStore := any _reStore.
	table := reStore tableForClass: any class.

	aCollection do: [ :instVar | (table componentAccessing: instVar) readAllFor: self]

	!

_proxifyIn: aCollectionProxy

	aCollectionProxy _proxiedObject: self.
	^self!

fetch: aSymbol

	"ReStore - for each element of the receiver, use a single query (ideally, or multiple batched queries if the receiver's size is too large for the readAll batch size)
	to fetch from the database the component in the inst var named aSymbol"

	^self fetchAll: (Array with: aSymbol)!

fetchAll: aCollection

	"ReStore - for each element of the receiver, use a single query (ideally, or multiple batched queries if the receiver's size is too large for the readAll batch size)
	to fetch from the database the components in the inst vars named in aCollection"

	^(self select: [ :each | each _isRecovered]) _fetchAll: aCollection!

isOrdered

	^false
!

isValidForPersistence

	"Collections are not persisted directly (e.g. via storeIn:), therefore consider them already persistent"

	^true!

of: targetClass

	"ReStore specification method - specifies a general (M to M) collection containing aClass.
	Create and return an appropriate SSWDBCollectionSpec"

	^self of: targetClass specClass: self staticCollectionSpecClass!

of: targetClass owner: aSymbol

	"ReStore specification method - specifies a 1 to many collection, containing aClass,
	whose inst var named aSymbol holds the owning (1) object.

	Create and return an appropriate SSWDBCollectionSpec"

	^self ownedCollectionSpecClass new
		templateCollection: self;
		setTargetClass: targetClass;
		owner: aSymbol;
		yourself
!

of: targetClass specClass: specClass

	"ReStore specification method - specifies a general (M to M) collection containing aClass.
	Create, initialize and return a configured instance of the given SSWDBCollectionSpec class"

	^specClass new
		templateCollection: self;
		setTargetClass: targetClass;
		yourself!

orRemote

	"The receiver is already in memory, return it"

	^self!

ownedCollectionSpecClass 

	"Return the class of owned collection spec that is appropriate for this kind of collection"

	^SSWDBOwnedCollectionSpec

!

remote

	"Defer to the proxy"

	^self _dbProxy remote!

staticCollectionSpecClass 

	"Return the class of static collection spec that is appropriate for this kind of collection.
	Subclasses for which this may differ depending on mode of use should not implement this,
	but should route configuration through of:specClass: "

	^self subclassResponsibility! !
!Collection categoriesForMethods!
_dbAdd:!private!restore-internal! !
_dbAdd:suggestedIndex:!adding!private! !
_fetchAll:!private!restore-internal! !
_proxifyIn:!private!restore-internal! !
fetch:!converting!public! !
fetchAll:!converting!public! !
isOrdered!public!testing! !
isValidForPersistence!comparing!private! !
of:!public!specification! !
of:owner:!public!specification! !
of:specClass:!public!specification! !
orRemote!converting!public! !
ownedCollectionSpecClass!constants!private! !
remote!converting!public! !
staticCollectionSpecClass!constants!private! !
!

!Collection class methodsFor!

of: targetClass

	^self new of: targetClass
!

of: targetClass owner: aSymbol

	^self new of: targetClass owner: aSymbol

! !
!Collection class categoriesForMethods!
of:!public!specification! !
of:owner:!public!specification! !
!

!Dictionary methodsFor!

_dbAdd: targetObject suggestedIndex: keyObject

	"Make the receiver polymorphic with an indexed collection. keyObject = index"

	^self at: keyObject put: targetObject!

of: anAssociation

	"ReStore specification method - specify a Dictionary which stores instances of the class which is the value of anAssociation.
	The key of Association should be either:
	 - the class of the keys of the Dictionary, e.g.  Dictionary of: DateAndTime -> CustomerOrder
	OR
	 - an instance variable name (Symbol) of the value class; the contents of this instance variable is used as the key for each element, e.g. Dictionary of: #surname -> Person
	OR
	 - a 1-arg Block which is evaluated with each elements to derive the key, e.g. Dictionary of: [ :obj | obj name asLowercase] -> Person
	Create and return an appropriate SSWDBCollectionSpec"

	^(anAssociation key isSymbol or: [anAssociation key isKindOf: BlockClosure])
		ifTrue: [self of: anAssociation value keyedOn: anAssociation key]
		ifFalse: [self of: anAssociation value keyClass: anAssociation key]
!

of: targetClass keyClass: keyClass

	"Private - ReStore specification method - specify a Dictionary which stores instances of targetClass.
	The Dictionary's keys will be of the class keyClass, which should be a valid persistent class.
	Create and return an appropriate SSWDBCollectionSpec"

	^(self of: targetClass specClass: self staticDictionarySpecClass)
		setKeyClass: keyClass;
		yourself!

of: targetClass keyedOn: aSymbolOrBlock

	"Private - ReStore specification method - specify a Dictionary which stores instances of targetClass.
	The target class may alternatively be a collection specification (e.g. OrderedCollection of: Person) for a multi-value dictionary.
	Instances are stored in the receiver at: the value detemined by evaluating aSymbolOrBlock with them (usually but not always the value of an instance variable).
	Create and return an appropriate SSWDBCollectionSpec"

	| spec |

	(targetClass isKindOf: SSWDBCollectionSpec)
	ifTrue: 
		[spec := self of: targetClass targetClass specClass: self staticMultiValueCacheDictionarySpecClass.
		targetClass isValueDependent ifTrue: [spec beValueDependent]]
	ifFalse: 
		[spec := self of: targetClass specClass: self staticCacheDictionarySpecClass].

	^spec
		keyedOn: aSymbolOrBlock;
		yourself!

of: anAssociation owner: aSymbol

	"Private - ReStore specification method - specify a Dictionary which stores instances of the class which is the value of anAssociation.
	The key of Association should be an instance variable name (Symbol) of the value class; the contents of this instance variable is used as the key for each element, e.g. Dictionary of: #surname -> Person
	Create and return an appropriate SSWDBCollectionSpec"

	^self of: anAssociation value owner: aSymbol keyedOn: anAssociation key!

of: targetClass owner: ownerSymbol keyedOn: aSymbol

	"Private - ReStore specification method - specify a Dictionary which stores instances of targetClass.
	The target class may alternatively be a collection specification (e.g. OrderedCollection of: Person) for a multi-value dictionary.
	Instances are stored in the receiver at: the value detemined by evaluating aSymbolOrBlock with them (usually but not always the value of an instance variable).
	Create and return an appropriate SSWDBCollectionSpec"

	| spec |

	(targetClass isKindOf: SSWDBCollectionSpec)
	ifTrue: 
		[spec := self of: targetClass targetClass specClass: self ownedMultiValueCacheDictionarySpecClass.
		targetClass isValueDependent ifTrue: [spec beValueDependent]]
	ifFalse: 
		[spec := self of: targetClass specClass: self ownedCacheDictionarySpecClass].

	^spec
		owner: ownerSymbol;
		keyedOn: aSymbol;
		yourself!

ownedCacheDictionarySpecClass

	^SSWDBOwnedCacheDictionarySpec!

ownedMultiValueCacheDictionarySpecClass

	^SSWDBOwnedMultiValueCacheDictionarySpec!

staticCacheDictionarySpecClass

	^SSWDBStaticCacheDictionarySpec!

staticCollectionSpecClass 

	"Do not implement this method, the staticCollectionSpecClass for Dictionaries varies
	(see of:xxxx: variants)"

	^self shouldNotImplement

!

staticDictionarySpecClass

	^SSWDBStaticDictionarySpec!

staticMultiValueCacheDictionarySpecClass

	^SSWDBStaticMultiValueCacheDictionarySpec! !
!Dictionary categoriesForMethods!
_dbAdd:suggestedIndex:!adding!private! !
of:!public!specification! !
of:keyClass:!private!specification! !
of:keyedOn:!private!specification! !
of:owner:!private!specification! !
of:owner:keyedOn:!private!specification! !
ownedCacheDictionarySpecClass!private!specification! !
ownedMultiValueCacheDictionarySpecClass!private!specification! !
staticCacheDictionarySpecClass!private!specification! !
staticCollectionSpecClass!constants!private! !
staticDictionarySpecClass!private!specification! !
staticMultiValueCacheDictionarySpecClass!private!specification! !
!

!IdentitySet methodsFor!

staticCollectionSpecClass 

	^SSWDBStaticIdentitySetSpec! !
!IdentitySet categoriesForMethods!
staticCollectionSpecClass!constants!private! !
!

!SequenceableCollection methodsFor!

isOrdered

	^true
!

staticCollectionSpecClass 

	^SSWDBOrderedStaticCollectionSpec

! !
!SequenceableCollection categoriesForMethods!
isOrdered!public!testing! !
staticCollectionSpecClass!constants!private! !
!

!Set methodsFor!

staticCollectionSpecClass

	"Return the class of static collection spec that is appropriate for this kind of collection.
	Subclasses for which this may differ depending on mode of use should not implement this,
	but should route configuration through of:specClass: "

	^SSWDBHashedStaticCollectionSpec! !
!Set categoriesForMethods!
staticCollectionSpecClass!constants!private! !
!

!SortedCollection methodsFor!

_dbAdd: anObject

	"For use when instantiating a collection from the database.
	Sorting is done by the recovery query, so we need to use an unconditional addLast: to avoice the expense of sorting, and potentially interrogating a non-recovered persistent object"

	^super addLast: anObject!

orderingSpecsFor: aClass in: aReStore

	"Convert the receiver's sortBlock into DBOrderingSpecs"

	^(self sortBlock = SortedCollection new sortBlock and: [aClass isDirectlyPersisted]) "default ascending sort"
	ifTrue:
		[OrderedCollection with: (SSWDBOrderingSpec ascending: #target)]
	ifFalse:
		[| instances |
		instances := aReStore instancesOf: aClass.
		instances sortBlock: (self sortBlock ifNil: [SortedCollection defaultSortBlock]).
		instances parser orderingSpecs collect: 
			[ :each || field |
			field := each criteria.
			field isNil 
				ifTrue: [each criteria: #target]
				ifFalse: [each criteria: field accessor name]]]!

ownedCollectionSpecClass 

	"Return the class of owned collection spec that is appropriate for this kind of collection"

	^SSWDBSortedOwnedCollectionSpec!

staticCollectionSpecClass 

	^SSWDBSortedStaticCollectionSpec

! !
!SortedCollection categoriesForMethods!
_dbAdd:!comparing!private! !
orderingSpecsFor:in:!accessing!private! !
ownedCollectionSpecClass!constants!private! !
staticCollectionSpecClass!constants!private! !
!

!SSWDBDependentWrapper methodsFor!

beKeyClassOf: aTableComponent

	"Polymorphic with the Class implementation"
		
	super beKeyClassOf: aTableComponent.
	aTableComponent beKeyDependent!

beTargetClassOf: aTableComponent

	"Polymorphic with the Class implementation"

	super beTargetClassOf: aTableComponent.
	aTableComponent beValueDependent! !
!SSWDBDependentWrapper categoriesForMethods!
beKeyClassOf:!defining!public! !
beTargetClassOf:!defining!public! !
!

!SSWDBRelatedWrapper methodsFor!

beKeyClassOf: aTableComponent

	"Polymorphic with the Class implementation"

	self relatedObject beKeyClassOf: aTableComponent.
	aTableComponent beKeyRelated!

beTargetClassOf: aTableComponent

	"Polymorphic with the Class implementation"

	self relatedObject beTargetClassOf: aTableComponent.
	aTableComponent beValueRelated! !
!SSWDBRelatedWrapper categoriesForMethods!
beKeyClassOf:!defining!public! !
beTargetClassOf:!defining!public! !
!

!SSWDBUnrelatedWrapper methodsFor!

beKeyClassOf: aTableComponent

	"Polymorphic with the Class implementation"

	self unrelatedObject beKeyClassOf: aTableComponent.
	aTableComponent beKeyUnrelated!

beTargetClassOf: aTableComponent

	"Polymorphic with the Class implementation"

	self unrelatedObject beTargetClassOf: aTableComponent.
	aTableComponent beValueUnrelated! !
!SSWDBUnrelatedWrapper categoriesForMethods!
beKeyClassOf:!defining!public! !
beTargetClassOf:!defining!public! !
!

"End of package definition"!

