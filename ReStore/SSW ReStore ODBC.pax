| package |
package := Package name: 'SSW ReStore ODBC'.
package paxVersion: 1;
	basicComment: 'ReStore
©2019 John Aspinall
https://github.com/rko281/ReStore'.

package classNames
	add: #SSWODBCBinaryBuffer;
	add: #SSWODBCBoundBuffer;
	add: #SSWODBCColAttr;
	add: #SSWODBCConnection;
	add: #SSWODBCField;
	add: #SSWODBCForwardOnlyResultSet;
	add: #SSWODBCLongVarField;
	add: #SSWODBCResultSet;
	add: #SSWODBCRow;
	add: #SSWODBCStatement;
	add: #SSWODBCVarBinaryBuffer;
	add: #SSWODBCVarCharBuffer;
	yourself.

package methodNames
	add: #DBError -> #isCommunicationLinkFailure;
	add: #DBError -> #isInvalidTransactionState;
	add: #DBError -> #isRecordDeletedError;
	add: #DBErrorDetails -> #isCommunicationLinkFailure;
	add: #DBErrorDetails -> #isInvalidCursorPosition;
	add: #DBErrorDetails -> #isInvalidTransactionState;
	add: #ODBCLibrary -> #sqlDescribeParam:parameterNumber:dataTypePtr:parameterSizePtr:decimalDigitsPtr:nullablePtr:;
	add: #SSWDBField -> #asParameterColumn:for:;
	add: #SSWDBField -> #columnIn:;
	add: #SSWDBFunctionField -> #asParameterColumn:for:;
	add: #SSWDBQueryField -> #asParameterColumn:for:;
	add: #SSWDBStringWithInfo -> #dbMaxFieldSize;
	add: #SSWMSAccessDialect -> #canDescribeParameters;
	add: #SSWMSAccessDialect -> #shouldMaskSuccessWithInfo;
	add: #SSWMySQLDialect -> #catalogNameForTable:;
	add: #SSWMySQLDialect -> #schemaNameForTable:;
	add: #SSWMySQLDialect -> #tableNamesInNamespace:for:;
	add: #SSWPostgreSQLDialect -> #shouldCheckAutoCommit;
	add: #SSWSQLDialect -> #canDescribeParameters;
	add: #SSWSQLDialect -> #catalogNameForTable:;
	add: #SSWSQLDialect -> #createNamespaceSQLFor:;
	add: #SSWSQLDialect -> #cursorType;
	add: #SSWSQLDialect -> #dropNamespaceSQLFor:;
	add: #SSWSQLDialect -> #schemaNameForTable:;
	add: #SSWSQLDialect -> #shouldCheckAutoCommit;
	add: #SSWSQLDialect -> #shouldMaskSuccessWithInfo;
	add: #SSWSQLDialect -> #shouldRollbackOnQuery;
	add: #SSWSQLDialect -> #shouldUseColumnsStatement;
	add: #SSWSQLDialect -> #tableNamesInNamespace:for:;
	add: #SSWSQLiteDialect -> #createNamespaceSQLFor:;
	add: #SSWSQLiteDialect -> #dropNamespaceSQLFor:;
	add: #SSWSQLiteDialect -> #shouldRollbackOnQuery;
	add: #SSWSQLiteDialect -> #shouldUseColumnsStatement;
	add: #SSWSQLiteDialect -> #tableNamesInNamespace:for:;
	add: #SSWSQLParameterField -> #asParameterColumn:for:;
	add: #SSWSQLServerDialect -> #canDescribeParameters;
	add: #SSWSQLServerDialect -> #cursorType;
	add: #SSWSQLWriteStream -> #parameterizedColumnsFor:;
	add: #String -> #asParameterColumn;
	add: 'ByteArray class' -> #dbMaxFieldSize;
	add: 'DBBoundField class' -> #sswODBCSubclass;
	add: 'DBField class' -> #newForCol:statement:;
	add: 'DBField class' -> #sswODBCSubclass;
	add: 'DBLongVarField class' -> #sswODBCSubclass;
	add: 'GUID class' -> #dbMaxFieldSize;
	add: 'Object class' -> #dbMaxFieldSize;
	add: 'SSWSQLParameterField class' -> #dbMaxFieldSize;
	add: 'String class' -> #dbMaxFieldSize;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\Database\Database Connection Base'
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\Core\Object Arts\Dolphin\Base\Dolphin Legacy Date & Time'
	'SSW ReStore Base Additions'
	'SSW ReStore Querying'
	'SSW ReStore SQL Entities'
	'SSW ReStore SQL Queries'
	'SSW ReStore Tables').

package!

"Class Definitions"!

DBResultSet subclass: #SSWODBCResultSet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

DBForwardOnlyResultSet subclass: #SSWODBCForwardOnlyResultSet
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

DBRow subclass: #SSWODBCRow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

DBBoundBuffer subclass: #SSWODBCBoundBuffer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

DBParameterizedStatement subclass: #SSWODBCStatement
	instanceVariableNames: 'query numColumns cachedColumns cachedColumnsIndices'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

DBColAttr subclass: #SSWODBCColAttr
	instanceVariableNames: 'field maxBoundBufferSize isFunctionParameter'
	classVariableNames: 'SSWODBCBufferClasses'
	poolDictionaries: ''
	classInstanceVariableNames: ''!

DBConnection subclass: #SSWODBCConnection
	instanceVariableNames: 'sqlDialect debugStream allocatedStatementCount columnDescriptions queryCount'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

DBBoundField subclass: #SSWODBCField
	instanceVariableNames: 'statement needsRebinding previousScale scaleDivisor'
	classVariableNames: ''
	poolDictionaries: 'ODBCConstants'
	classInstanceVariableNames: ''!

DBLongVarField subclass: #SSWODBCLongVarField
	instanceVariableNames: 'statement needsRebinding'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

DBBinaryBuffer subclass: #SSWODBCBinaryBuffer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

DBVarBinaryBuffer subclass: #SSWODBCVarBinaryBuffer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

DBVarCharBuffer subclass: #SSWODBCVarCharBuffer
	instanceVariableNames: 'sqlDialect'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Loose Methods"!

!ByteArray class methodsFor!

dbMaxFieldSize

	"The receiver represents the unsized character column concept in the database, therefore the max field size is undefined"

	^nil! !

!ByteArray class categoriesForMethods!
dbMaxFieldSize!public!specification! !
!

!DBBoundField class methodsFor!

sswODBCSubclass

	^SSWODBCField! !

!DBBoundField class categoriesForMethods!
sswODBCSubclass!instance creation!public! !
!

!DBError methodsFor!

isCommunicationLinkFailure

	^tag notNil and: [tag errors anySatisfy: [ :each | each isCommunicationLinkFailure]]!

isInvalidTransactionState

	^tag notNil and: [tag errors anySatisfy: [ :each | each isInvalidTransactionState]]!

isRecordDeletedError

	^tag notNil and: [tag errors anySatisfy: [ :each | each isInvalidCursorPosition]]! !

!DBError categoriesForMethods!
isCommunicationLinkFailure!public!testing! !
isInvalidTransactionState!public!testing! !
isRecordDeletedError!public!testing! !
!

!DBErrorDetails methodsFor!

isCommunicationLinkFailure

	^self sqlState = '08S01'!

isInvalidCursorPosition

	^self sqlState = 'S1109'!

isInvalidTransactionState

	^self sqlState = '25000'! !

!DBErrorDetails categoriesForMethods!
isCommunicationLinkFailure!public!testing! !
isInvalidCursorPosition!public!testing! !
isInvalidTransactionState!public!testing! !
!

!DBField class methodsFor!

newForCol: aSSWODBCColAttr statement: anSSWODBCStatement

	^self sswODBCSubclass newForCol: aSSWODBCColAttr statement: anSSWODBCStatement!

sswODBCSubclass

	self error: 'not implemented for <1d>' << self! !

!DBField class categoriesForMethods!
newForCol:statement:!instance creation!public! !
sswODBCSubclass!instance creation!public! !
!

!DBLongVarField class methodsFor!

sswODBCSubclass

	^SSWODBCLongVarField! !

!DBLongVarField class categoriesForMethods!
sswODBCSubclass!instance creation!public! !
!

!GUID class methodsFor!

dbMaxFieldSize

	^16! !

!GUID class categoriesForMethods!
dbMaxFieldSize!persistency!private! !
!

!Object class methodsFor!

dbMaxFieldSize

	"Invoked here where the reStoreIDClass is string or binary-based. Pass on to the reStoreIDClass"

	^self reStoreIDClass dbMaxFieldSize! !

!Object class categoriesForMethods!
dbMaxFieldSize!persistency!public! !
!

!ODBCLibrary methodsFor!

sqlDescribeParam: anExternalHandle parameterNumber: columnInteger dataTypePtr: typeSWORD parameterSizePtr: precisionDWORD decimalDigitsPtr: scaleSWORD nullablePtr: nullableSWORD 
	"SQLRETURN SQLDescribeParam(  
	      SQLHSTMT        StatementHandle,  
	      SQLUSMALLINT    ParameterNumber,  
	      SQLSMALLINT *   DataTypePtr,  
	      SQLULEN *       ParameterSizePtr,  
	      SQLSMALLINT *   DecimalDigitsPtr,  
	      SQLSMALLINT *   NullablePtr);  "

	<stdcall: sword SQLDescribeParam handle sword SWORD* DWORD* SWORD* SWORD*>
	^self invalidCall: _failureCode! !

!ODBCLibrary categoriesForMethods!
sqlDescribeParam:parameterNumber:dataTypePtr:parameterSizePtr:decimalDigitsPtr:nullablePtr:!public!win32 functions-odbc library! !
!

!SSWDBField methodsFor!

asParameterColumn: anInteger for: aStatement

	^self columnIn: aStatement parent!

columnIn: anODBCConnection

	^(anODBCConnection columnsInTable: self table) at: self! !

!SSWDBField categoriesForMethods!
asParameterColumn:for:!accessing!public! !
columnIn:!accessing!public! !
!

!SSWDBFunctionField methodsFor!

asParameterColumn: anInteger for: aStatement

	^(super asParameterColumn: anInteger for: aStatement) copyForFunction
		isFunctionParameter: true;
		yourself! !

!SSWDBFunctionField categoriesForMethods!
asParameterColumn:for:!public! !
!

!SSWDBQueryField methodsFor!

asParameterColumn: anInteger for: aStatement

	^self field asParameterColumn: anInteger for: aStatement! !

!SSWDBQueryField categoriesForMethods!
asParameterColumn:for:!accessing!public! !
!

!SSWDBStringWithInfo methodsFor!

dbMaxFieldSize

	^self fieldSize! !

!SSWDBStringWithInfo categoriesForMethods!
dbMaxFieldSize!accessing!public! !
!

!SSWMSAccessDialect methodsFor!

canDescribeParameters

	^false!

shouldMaskSuccessWithInfo

	^false! !

!SSWMSAccessDialect categoriesForMethods!
canDescribeParameters!public!testing! !
shouldMaskSuccessWithInfo!public!testing! !
!

!SSWMySQLDialect methodsFor!

catalogNameForTable: aDBTable

	^aDBTable namespace!

schemaNameForTable: aDBTable

	^nil!

tableNamesInNamespace: aString for: aDBConnection

	^aDBConnection tables: aString owners: nil tables: nil types: '''TABLE'''! !

!SSWMySQLDialect categoriesForMethods!
catalogNameForTable:!helpers!public! !
schemaNameForTable:!helpers!public! !
tableNamesInNamespace:for:!helpers!public! !
!

!SSWPostgreSQLDialect methodsFor!

shouldCheckAutoCommit

	^true! !

!SSWPostgreSQLDialect categoriesForMethods!
shouldCheckAutoCommit!public!testing! !
!

!SSWSQLDialect methodsFor!

canDescribeParameters

	"Does this dialect support the SQLDescribeParam function?"

	^true!

catalogNameForTable: aDBTable

	^nil!

createNamespaceSQLFor: aString

	^'CREATE SCHEMA ', (self asIdentifier: aString)!

cursorType

	"Return the Symbol-ic name of the ODBC cursor type that will be used when creating statements. 
	See DBAbstractStatement>>cursorType for further details"

	^#forwardOnly!

dropNamespaceSQLFor: aString

	^'DROP SCHEMA ', (self asIdentifier: aString)!

schemaNameForTable: aDBTable

	^aDBTable namespace!

shouldCheckAutoCommit

	"Return whether the DBConnection should check the status of autoCommit prior to attempting a change"

	^false!

shouldMaskSuccessWithInfo

	"Some databases/drivers send many SQLSuccessWithInfo results.
	shouldMaskSuccessWithInfo determines whether these go unreported (true, standard behavior for most dbs) or are reported via a DBWarning exception (false)"

	^true!

shouldRollbackOnQuery

	"Should the ODBC connection rollbackTxn following a query outside a Txn?"

	^false!

shouldUseColumnsStatement

	"Return whether this dialect should use DBColumnsStatement to interrogate the details of a table's columns (true, default) or a SELECT * query (false).
	
	Here primarily to satisfy a shortcoming in SQLite ODBC driver where DBColumnsStatement returns the character length for wide string columns, rather than the buffer length.
	Column details returned from a SELECT * query report the buffer length correctly"

	^true!

tableNamesInNamespace: aStringOrNil for: aDBConnection

	^aDBConnection tables: nil owners: (aStringOrNil ifNil: [self standardNamespace]) tables: nil types: '''TABLE'''! !

!SSWSQLDialect categoriesForMethods!
canDescribeParameters!public!testing! !
catalogNameForTable:!helpers!public! !
createNamespaceSQLFor:!maintenance!private! !
cursorType!constants!public! !
dropNamespaceSQLFor:!maintenance!private! !
schemaNameForTable:!helpers!public! !
shouldCheckAutoCommit!public!testing! !
shouldMaskSuccessWithInfo!public!testing! !
shouldRollbackOnQuery!public!testing! !
shouldUseColumnsStatement!public!testing! !
tableNamesInNamespace:for:!helpers!public! !
!

!SSWSQLiteDialect methodsFor!

createNamespaceSQLFor: aString

	"Since there is no filename given, map this to creating a temporary attached database"

	^'ATTACH DATABASE '''' AS ', (self asIdentifier: aString)!

dropNamespaceSQLFor: aString

	^'DETACH DATABASE ', (self asIdentifier: aString)!

shouldRollbackOnQuery

	"Seems to be required to avoid locking issues"

	^true!

shouldUseColumnsStatement

	"Under the SQLite ODBC driver DBColumnsStatement returns the character length for wide string columns, rather than the buffer length.
	Column details returned from a SELECT * query report the buffer length correctly"

	^false!

tableNamesInNamespace: aString for: aDBConnection

	| stream table results |

	table := SSWDBTable new namespace: aString; name: 'sqlite_master'; yourself.
	stream := self sqlWriteStream.
	stream 
		nextPutAll: 'SELECT name FROM ';
		writeSQLFor: table;
		nextPutAll: ' WHERE type = ''table'''.

	results := aDBConnection query: stream contents.

	^results collect: [ :each | each atIndex: 1]! !

!SSWSQLiteDialect categoriesForMethods!
createNamespaceSQLFor:!maintenance!private! !
dropNamespaceSQLFor:!maintenance!private! !
shouldRollbackOnQuery!public!testing! !
shouldUseColumnsStatement!public!testing! !
tableNamesInNamespace:for:!helpers!public! !
!

!SSWSQLParameterField methodsFor!

asParameterColumn: anInteger for: aStatement

	^(aStatement describeParam: anInteger) ifNil: [self value asParameterColumn]! !

!SSWSQLParameterField categoriesForMethods!
asParameterColumn:for:!converting!public! !
!

!SSWSQLParameterField class methodsFor!

dbMaxFieldSize

	^nil! !

!SSWSQLParameterField class categoriesForMethods!
dbMaxFieldSize!accessing!public! !
!

!SSWSQLServerDialect methodsFor!

canDescribeParameters

	"Appears to be supported by the native ODBC driver, but flaky (doesn't work with > 1 param?), so let's act as if it doesn't work"

	^false!

cursorType

	"Default #forwardOnly gives 'Connection is busy with results for another hstmt' error"

	^#keysetDriven! !

!SSWSQLServerDialect categoriesForMethods!
canDescribeParameters!public!testing! !
cursorType!constants!public! !
!

!SSWSQLWriteStream methodsFor!

parameterizedColumnsFor: aStatement

	| parameterizedColumns |

	parameterizedColumns := Array new: self parameterizedFields size.

	self parameterizedFields keysAndValuesDo: [ :index :field | parameterizedColumns at: index put: (field asParameterColumn: index for: aStatement)].

	^parameterizedColumns! !

!SSWSQLWriteStream categoriesForMethods!
parameterizedColumnsFor:!accessing!public! !
!

!String methodsFor!

asParameterColumn

	^SSWODBCColAttr forString: self! !

!String categoriesForMethods!
asParameterColumn!converting!public! !
!

!String class methodsFor!

dbMaxFieldSize

	"The receiver represents the unsized character column concept in the database, therefore the max field size is undefined"

	^nil! !

!String class categoriesForMethods!
dbMaxFieldSize!public!specification! !
!

"End of package definition"!

