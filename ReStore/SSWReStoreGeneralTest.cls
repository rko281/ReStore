"Filed out from Dolphin Smallalk"!

SSWReStoreTest subclass: #SSWReStoreGeneralTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWReStoreGeneralTest guid: (GUID fromString: '{4f101377-8275-42bf-b910-6cf05c5d88d5}')!
SSWReStoreGeneralTest comment: 'ReStore
©2019 John Aspinall
https://github.com/rko281/ReStore'!
!SSWReStoreGeneralTest categoriesForClass!Unclassified! !
!SSWReStoreGeneralTest methodsFor!

_test21GeneralDictionaryRefresh

	"Currently not working - issues around rebuilding a Dictionary (needing rehash = needs access to key objects) during refresh"

	| t key value keyOrig valueOrig |

	"Check refresh of keys - general dict"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.

	key := t keyedGeneralDictionary keys asArray first.
	value := t keyedGeneralDictionary at: key.

	keyOrig := key name.
	valueOrig := value name.

	key name: keyOrig, '_changed'.
	value name: valueOrig, '_changed'.

	reStore refresh: t keyedGeneralDictionary withRelatedComponents.

	self assert: (key name = keyOrig).
	self assert: (value name = valueOrig)!

createTestData

	self createStandardTestInstance.
	reStore simulateReconnect!

test01Events

	"Check persistency of events"

	| t counter |

	reStore refreshAllObjects.
	t := (OwnerTest storedInstancesIn: reStore) last.
	counter := OrderedCollection new.

	reStore beginTransaction.
	t single1 when: #something send: #yourself to: t.
	t single1 name: 'blah'.
	t list when: #listChanged send: #add: to: counter with: 1.
	t ownedList when: #listChanged send: #add: to: counter with: 2.
	t list removeLast.
	t ownedList removeLast.
	reStore rollbackTransaction.

	self assert: (t single1 getEvents includesKey: #something).
	self assert: (t list getEvents includesKey: #listChanged).
	self assert: (t ownedList getEvents includesKey: #listChanged).
	self assert: (counter asSortedCollection asArray = #(1 2))
!

test02Rollback

	| t kd |

	"Test rollback"
	reStore refreshAllObjects.
	t := (OwnerTest storedInstancesIn: reStore) last.

	reStore  beginTransaction.
	t single1 name: 'single A'.
	t single2 name: 'single B'.
	t single3: (Test new name: 'single C').
	t ownedSet remove: (t ownedSet detect: [ :e | true]).
	t setOfDates add: (Date today subtractDays: 900).
	t arrayOfNames at: 2 put: 'Weed'.
	t orderedBools atAllPut: true.
	t sortedNumbers remove: 1; add: 0; add: 99.
	t descNumbers remove: 1; add: 0; add: 99.
	t listOfTimes add: Time now.
	t dictOfSizes removeKey: 'Pogle'; at: 'Pippin' put: 'Pippin' size.
	t ownedOrdered addLast: t ownedOrdered first; removeFirst.
	t ownedSorted remove: (t ownedSet detect: [ :e | true]).
	t ownedList removeFirst.
	t set remove: (t set detect: [ :e | e name = 'set1']); add: (Test new name: 'set3').
	t array at: 3 put: (t array at: 1); at: 4 put: (Test new name: 'array4'); at: 1 put: nil.
	t ordered addLast: t ordered first; removeFirst; addLast: (Test new name: 'ordered4').
	t sorted add: (Test new name: 'sorted0'); add: (Test new name: 'sorted3').
	t list addLast: t list first; removeFirst; addLast: (Test new name: 'list4').
	t aspectDictionary removeKey: 'aspdic1'; at: 'aspdic4' put: (Test new name: 'aspdic4'; yourself).
	kd := t keyedBaseDictionary.
	kd 
		at: 'b' put: (kd at: 'a'); 
		at: 'a' put: (Test new name: 'keydic1a'; yourself); 
		removeKey: 'c'; 
		at: 'd' put: (Test new name: 'keydic4'; yourself).
	kd := t keyedGeneralDictionary.
	kd 
		at: (kd keys detect: [ :e | e name = 'key2']) put: (kd values detect: [ :e | e name = 'value1']);
		at: (kd keys detect: [ :e | e name = 'key1']) put: (Test new name: 'value1a'; yourself);
		removeKey: (kd keys detect: [ :e | e name = 'key3']);
		at: (Test new name: 'key4'; yourself) put: (Test new name: 'value4'; yourself).
	kd := nil.
	reStore rollbackTransaction.

	reStore refreshAllObjects.
	t := (OwnerTest storedInstancesIn: reStore) asOrderedCollection last.

	self assert: (t single1 name = 'single1').
	self assert: (t single2 name = 'single2').
	self assert: (t single2 == t single3).
	self assert: (t ownedSet isEmpty not).
	self assert: (t setOfDates size = 2).
	self assert: (t setOfDates includes: Date today).
	self assert: (t setOfDates includes: (Date today subtractDays: 92)).
	self assert: (t arrayOfNames = #('Bill' 'Ben')).
	self assert: (t orderedBools includes: true).
	self assert: (t orderedBools includes: false).
"	self assert: (t orderedBools includes: nil)."
	self assert: (t orderedBools size = 3).
	self assert: (t sortedNumbers asArray = #(1 2 3)).
	self assert: (t descNumbers asArray = #(3 2 1)).
	self assert: (t listOfTimes size = 1).
	self assert: ((t dictOfSizes at: 'Pogle' ifAbsent: [0]) = 5).
	self assert: ((t dictOfSizes at: 'Tog' ifAbsent: [0]) = 3).
	self assert: ((t ownedArray collect: [ :e | e ifNil: ['nil'] ifNotNil: [e name]]) asSortedCollection asArray = (Array with: 'nil' with: 'nil' with: 'owned1' with: 'owned2')). "ordering of owned collections is usually in order of creation, but is technically arbitrary"
	self assert: (t array first name = 'array1').
	self assert: ((t array at: 2) name = 'array2').
	self assert: (t set size = 2).
	self assert: (t set anySatisfy: [ :e | e name = 'set1']).

	self assert: (t set anySatisfy: [ :e | e name = 'set2']).
	self assert: (t ordered size = 2).
	self assert: (t ordered anySatisfy: [ :e | e name = 'ordered1']).
	self assert: (t ordered anySatisfy: [ :e | e name = 'ordered2']).
	self assert: (t sorted size = 2).
	self assert: (t sorted anySatisfy: [ :e | e name = 'sorted1']).
	self assert: (t sorted anySatisfy: [ :e | e name = 'sorted2']).
	self assert: (t list size = 2).
	self assert: (t list anySatisfy: [ :e | e name = 'list1']).
	self assert: (t list anySatisfy: [ :e | e name = 'list2']).

	self assert: (t aspectDictionary size = 3).
	self assert: ((t aspectDictionary at: 'aspdic1') name = 'aspdic1').
	self assert: ((t aspectDictionary at: 'aspdic2') name = 'aspdic2').
	self assert: ((t aspectDictionary at: 'aspdic3') name = 'aspdic3').

	self assert: (t keyedBaseDictionary size = 3).
	self assert: ((t keyedBaseDictionary at: 'a') name = 'keydic1').
	self assert: ((t keyedBaseDictionary at: 'b') name = 'keydic2').
	self assert: ((t keyedBaseDictionary at: 'c') name = 'keydic3').

	self assert: (t keyedGeneralDictionary size = 3).
	t keyedGeneralDictionary keysAndValuesDo:
		[ :key :value |
		self assert: (key name beginsWith: 'key').
		self assert: (value name beginsWith: 'value').
		self assert: (key name last = value name last)]!

test02RollbackManual

	| t n |

	"Test rollbackAll: (manual rollback)"
	reStore refreshAllObjects.
	t := (OwnerTest storedInstancesIn: reStore) last.

	t single1 name: 'single AA'.
	n := t single2.
	t single2: nil.
	t single3: (Test new name: 'single3').
	t ordered addLast: (Test new name: 'ordered 99').
	(Array with: t with: t ordered with: t single1 with: n unstored with: t single3) rollbackAll.

	self assert: (t single1 name = 'single1').
	self assert: (t single2 notNil and: [t single2 name = 'single2']).
	self assert: ((Test storedInstancesIn: reStore) anySatisfy: [ :e | e name = 'single2']).
	self assert: (t single3 == t single2).
	self deny: ((Test storedInstancesIn: reStore) anySatisfy: [ :e | e name = 'single3']).
	self assert: (t ordered size = 2).
	self assert: (t ordered last name = 'ordered2')!

test03Commit

	| t kd |

	"Test commit"
	reStore refreshAllObjects.
	t := (OwnerTest storedInstancesIn: reStore) last.

	"Check commit"
	reStore beginTransaction.
	t single1 name: 'single A'.
	t single2 name: 'single B'.
	t single3: (OwnedTest new name: 'single D').
	"t ownedSet remove: (t ownedSet detect: [ :e | true]); add: (OwnedTest new name: 'owned0')."
	"t ownedArray at: 3 put: (t ownedArray at: 1); at: 1 put: nil; at: 4 put: (OwnedTest new name: 'owed4')."
	t ownedOrdered removeFirst; addLast: t single3.
	"t ownedSorted remove: (t ownedSet detect: [ :e | true]); add: (t ownedArray at: 4)."
	t setOfDates add: (Date today subtractDays: 900).
	t arrayOfNames at: 2 put: 'Weed'.
	t orderedBools atAllPut: true.
	t sortedNumbers remove: 1; add: 0; add: 99.
	t descNumbers remove: 1; add: 0; add: 99.
	t listOfTimes add: Time now.
	t dictOfSizes removeKey: 'Pogle'; at: 'Pippin' put: 'Pippin' size.
	t set remove: (t set detect: [ :e | e name = 'set1']); add: (Test new name: 'set3').
	t array at: 3 put: (t array at: 1); at: 4 put: (Test new name: 'array4'); at: 1 put: nil.
	t ordered addLast: t ordered first; removeFirst; addLast: (Test new name: 'ordered4').
	t sorted add: (Test new name: 'sorted0'); add: (Test new name: 'sorted3').
	t list addLast: t list first; removeFirst; addLast: (Test new name: 'list4').
	t aspectDictionary removeKey: 'aspdic1'; at: 'aspdic4' put: (Test new name: 'aspdic4'; yourself).
	kd := t keyedBaseDictionary.
	kd 
		at: 'b' put: (kd at: 'a'); 
		at: 'a' put: (Test new name: 'keydic1a'; yourself); 
		removeKey: 'c'; 
		at: 'd' put: (Test new name: 'keydic4'; yourself).
	kd := t keyedGeneralDictionary.
	kd 
		at: (kd keys detect: [ :e | e name = 'key2']) put: (kd values detect: [ :e | e name = 'value1']);
		at: (kd keys detect: [ :e | e name = 'key1']) put: (Test new name: 'value1a'; yourself);
		removeKey: (kd keys detect: [ :e | e name = 'key3']);
		at: (Test new name: 'key4'; yourself) put: (Test new name: 'value4'; yourself).
	kd := nil.

	reStore commitTransaction.

	reStore refreshAllObjects.
	t := (OwnerTest storedInstancesIn: reStore) asOrderedCollection last.

	self assert: (t single1 name = 'single A').
	self assert: (t single2 name = 'single B').
	self assert: (t single3 name = 'single D').
	self assert: (t ownedOrdered first name beginsWith: 'owned').
	self assert: (t ownedOrdered last == t single3).
	self assert: (t setOfDates size = 3).
	self assert: (t setOfDates includes: Date today).
	self assert: (t setOfDates includes: (Date today subtractDays: 92)).
	self assert: (t setOfDates includes: (Date today subtractDays: 900)).
	self assert: (t arrayOfNames = #('Bill' 'Weed')).
	self assert: (t orderedBools includes: true).
	self deny: (t orderedBools includes: false).
	self assert: (t orderedBools size = 3).
	self assert: (t sortedNumbers asArray = #(0 2 3 99)).
	self assert: (t descNumbers asArray = #(99 3 2 0)).
	self assert: (t listOfTimes size = 2).
	self assert: (t dictOfSizes size = 2).
	self assert: ((t dictOfSizes at: 'Pippin' ifAbsent: [0]) = 6).
	self assert: ((t dictOfSizes at: 'Tog' ifAbsent: [0]) = 3).
	self assert: (t set size = 2).
	self assert: (t set anySatisfy: [ :e | e name = 'set2']).
	self assert: (t set anySatisfy: [ :e | e name = 'set3']).
	self assert: (t array first isNil).
	self assert: ((t array at: 2) name = 'array2').
	self assert: ((t array at: 3) name = 'array1').
	self assert: ((t array at: 4) name = 'array4').
	self assert: (t ordered size = 3).
	self assert: (t ordered first name = 'ordered2').
	self assert: ((t ordered at: 2) name = 'ordered1').
	self assert: (t ordered last name = 'ordered4').
	self assert: (t sorted size = 4).
	self assert: (t sorted first name = 'sorted0').
	self assert: ((t sorted at: 2) name = 'sorted1').
	self assert: ((t sorted at: 3) name = 'sorted2').
	self assert: (t sorted last name = 'sorted3').
	self assert: (t list size = 3).
	self assert: (t list first name = 'list2').
	self assert: ((t list at: 2) name = 'list1').
	self assert: (t list last name = 'list4').

	self assert: (t aspectDictionary size = 3).
	self assert: ((t aspectDictionary at: 'aspdic4') name = 'aspdic4').
	self assert: ((t aspectDictionary at: 'aspdic2') name = 'aspdic2').
	self assert: ((t aspectDictionary at: 'aspdic3') name = 'aspdic3').

	self assert: (t keyedBaseDictionary size = 3).
	self assert: ((t keyedBaseDictionary at: 'a') name = 'keydic1a').
	self assert: ((t keyedBaseDictionary at: 'b') name = 'keydic1').
	self assert: ((t keyedBaseDictionary at: 'd') name = 'keydic4').

	self assert: (t keyedGeneralDictionary size = 3).
	t keyedGeneralDictionary keysAndValuesDo:
		[ :key :value |
		self assert: (key name beginsWith: 'key').
		self assert: (value name beginsWith: 'value').
		key name = 'key1' ifTrue: [self assert: (value name = 'value1a')].
		key name = 'key2' ifTrue: [self assert: (value name = 'value1')].
		key name = 'key4' ifTrue: [self assert: (value name = 'value4')]].!

test03CommitManual

	| t prevSize |

	"Test commitAll: (manual commit)"
	reStore refreshAllObjects.
	t := (OwnerTest storedInstancesIn: reStore) last.

	prevSize := t ordered size.

	t single1: nil.
	t single2 name: 'single BB'.
	t single3: (Test new name: 'single CC').
	t ordered addLast: (Test new name: 'ordered 99').
	t store.

	reStore refreshAllObjects.
	t := (OwnerTest storedInstancesIn: reStore) last.
	self assert: (t single1 = nil).
	self assert: (t single2 name = 'single BB').
	self deny: ((Test storedInstancesIn: reStore) anySatisfy: [ :each | each name = 'single A']).
	self assert: (t single3 name = 'single CC').
	self assert: (t ordered size = (prevSize + 1)).
	self assert: (t ordered last name = 'ordered 99').

	t ordered removeLast.
	t store.
	reStore refreshAllObjects.
	self assert: (t ordered size = prevSize)
!

test03LinkedQuery

	| owner |

	owner := (OwnerTest storedInstancesIn: reStore) first.

	self deny: ((OwnedTest storedInstancesIn: reStore) select: [ :each | each owner = owner]) isEmpty

	!

test04

	| t prevName r |

	"Check Delete on Replace - owned"
	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.

	prevName := t ownedOrdered first name.

	reStore beginTransaction.
	t ownedOrdered at: 1 put: (OwnedTest new name: 'owned rep1'; yourself).
	reStore commitTransaction.

	reStore clearProxyCache.
	r := (Test storedInstancesIn: reStore) select: [ :each | each name = 'owned rep1'].
	self assert: (r size = 1).
	self assert: (r first name = 'owned rep1').

	r := (Test storedInstancesIn: reStore) select: [ :each | each name = prevName].
	self assert: r isEmpty!

test05

	| t r d c id |

	"Check Delete on Remove - owned"
	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.
	reStore beginTransaction.

	d := t ownedOrdered detect: [ :each | each name = 'owned1'].
	c := (reStore tableForClass: d class) registerClass.
	id := d _id.
	self assert: ((reStore proxyCache at: c) includesKey: id).

	t ownedOrdered remove: d.
	reStore commitTransaction.
	self deny: ((reStore proxyCache at: c) includesKey: id).

	reStore clearProxyCache.
	r := (Test storedInstancesIn: reStore) select: [ :each | each name = 'owned1'].
	self assert: r isEmpty!

test06

	| t r |

	"Check Delete on Replace - unrefd ordered
	Starting scenario is ordered1-ordered2"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.
	reStore beginTransaction.

	t ordered at: 1 put: (OwnedTest new name: 'ordered rep1'; yourself).
	reStore commitTransaction.

	reStore clearProxyCache.
	self assert: (t ordered first name = 'ordered rep1').
	r := (Test storedInstancesIn: reStore) select: [ :each | 'ordered*' match: each name].
	self assert: (r size = 2).
	self deny: (r anySatisfy: [ :each | each name = 'ordered1'])!

test07

	| t |

	"Check non-delete on Replace - refd ordered
	Starting scenario is ordered ordered1-ordered2"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.
	reStore beginTransaction.

	t ordered addLast: t ordered first.
	t ordered at: 1 put: (OwnedTest new name: 'ordered rep1a'; yourself).
	reStore commitTransaction.

	reStore clearProxyCache.
	self assert: (t ordered first name = 'ordered rep1a').
	self assert: (t ordered second name = 'ordered2').
	self assert: (t ordered last name = 'ordered1')!

test08

	| t |

	"Check delete on Replace - unrefd changed ordered
	Starting scenario is ordered rep1a-ordered1-ordered4-ordered rep1"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.
	reStore beginTransaction.

	t ordered first name: 'xxxx'.
	t ordered at: 1 put: (OwnedTest new name: 'ordered rep1b'; yourself).
	reStore commitTransaction.

	reStore clearProxyCache.
	self assert: (t ordered first name = 'ordered rep1b').
	self assert: ((Test storedInstancesIn: reStore) satisfying: [ :each | each name = 'ordered rep1a']) isEmpty.
	self assert: ((Test storedInstancesIn: reStore) satisfying: [ :each | each name = 'xxxx']) isEmpty
!

test09

	| t |

	"Check delete on Remove.
	Starting scenario is ordered1-ordered2"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.
	reStore beginTransaction.

	t ordered removeFirst.
	reStore commitTransaction.

	reStore clearProxyCache.
	self assert: (t ordered size = 1).
	self assert: ((Test storedInstancesIn: reStore) satisfying: [ :each | each name = 'ordered1']) isEmpty
!

test10

	| t |

	"Check no delete for duplicates.
	Starting scenario is ordered1-ordered2"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.
	reStore beginTransaction.

	t ordered addFirst: t ordered removeLast.
	reStore commitTransaction.

	reStore clearProxyCache.
	self assert: (t ordered size = 2).
	self assert: (t ordered first name = 'ordered2').
	self deny: (t ordered last == t ordered first)
!

test11

	| t |

	"Check Delete on Replace - unrefd list
	Starting scenario is list1-list2"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.
	reStore beginTransaction.

	t list at: 1 put: (OwnedTest new name: 'list rep1'; yourself).
	reStore commitTransaction.

	reStore clearProxyCache.
	self assert: (t list first name = 'list rep1').
	self assert: ((Test storedInstancesIn: reStore) satisfying: [ :each | each name = 'list1']) isEmpty!

test12

	| t |

	"Check delete on Remove - list.
	Starting scenario is list1-list2"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.
	reStore beginTransaction.

	t list removeLast.
	reStore commitTransaction.

	reStore clearProxyCache.
	self assert: (t list size = 1).
	self assert: (t list first name = 'list1').
	self assert: ((Test storedInstancesIn: reStore) satisfying: [ :each | each name = 'list2']) isEmpty
!

test13

	| t |

	"Check delete on Remove - aspect dict"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.
	reStore beginTransaction.

	t aspectDictionary removeKey: 'aspdic2'.
	reStore commitTransaction.

	reStore clearProxyCache.
	self assert: (t aspectDictionary size = 2).
	self assert: ((Test storedInstancesIn: reStore) satisfying: [ :each | each name = 'aspdic2']) isEmpty!

test14

	| t |

	"Check delete on Remove - base dict
	Starting scenario is a>1, b>2, c>3"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.
	reStore beginTransaction.

	t keyedBaseDictionary removeKey: 'b'.
	reStore commitTransaction.

	reStore clearProxyCache.
	self assert: (t keyedBaseDictionary size = 2).
	self assert: ((Test storedInstancesIn: reStore) satisfying: [ :each | each name = 'keydic2']) isEmpty
!

test15

	| t |

	"Check delete on Replace - base dict
	Starting scenario is a>1, b>2, c>3"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.
	reStore beginTransaction.

	t keyedBaseDictionary at: 'a' put: (Test new name: 'keydic1b').
	reStore commitTransaction.

	reStore clearProxyCache.
	self assert: (t aspectDictionary size = 3).
	self assert: ((Test storedInstancesIn: reStore) satisfying: [ :each | each name = 'keydic1a']) isEmpty!

test16

	| t |

	"Check delete on Remove - general dict
	Starting scenario is 1>1, 2>2, 3>3"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.
	reStore beginTransaction.

	t keyedGeneralDictionary removeKey: (t keyedGeneralDictionary keys detect: [ :e | e name = 'key1']).
	reStore commitTransaction.

	reStore clearProxyCache.
	self assert: (t keyedGeneralDictionary size = 2).
	self assert: ((Test storedInstancesIn: reStore) satisfying: [ :each | each name = 'key1']) isEmpty.
	self assert: ((Test storedInstancesIn: reStore) satisfying: [ :each | each name = 'value1']) isEmpty
!

test17

	| t |

	"Check delete on Replace - base dict
	Starting scenario is 1>1, 2>2, 3>3"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.
	reStore beginTransaction.

	t keyedGeneralDictionary 
		at: (t keyedGeneralDictionary keys detect: [ :e | e name = 'key2'])
		put: (Test new name: 'value2a').
	reStore commitTransaction.

	reStore clearProxyCache.
	self assert: (t keyedGeneralDictionary size = 3).
	self assert: (t keyedGeneralDictionary at: (t keyedGeneralDictionary keys detect: [ :e | e name = 'key2'])) name = 'value2a'.
	self assert: ((Test storedInstancesIn: reStore) satisfying: [ :each | each name = 'value2']) isEmpty
!

test18

	| t key3 |

	"Check no delete on Remove if ref'd - general dict
	Starting scenario is 1>1, 2>2, 3>3"

	reStore clearProxyCache.

	t := (OwnerTest storedInstancesIn: reStore) last.
	key3 := t keyedGeneralDictionary keys detect: [ :e | e name = 'key3'].

	reStore beginTransaction.
	t keyedGeneralDictionary 
		at: (Test new name: 'key3a') 
		put: (t keyedGeneralDictionary at: key3).
	t keyedGeneralDictionary removeKey: key3.

	reStore commitTransaction.

	reStore clearProxyCache.
	self assert: (t keyedGeneralDictionary size = 3).
	self assert: ((Test storedInstancesIn: reStore) satisfying: [ :each | each name = 'key3']) isEmpty.
	self deny: ((Test storedInstancesIn: reStore) satisfying: [ :each | each name = 'value3']) isEmpty

!

test20GeneralDictionaryRollback

	| t key value keyOrig valueOrig |

	"Check refresh of keys - general dict"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.

	key := t keyedGeneralDictionary keys asArray first.
	value := t keyedGeneralDictionary at: key.

	keyOrig := key name.
	valueOrig := value name.

	key name: keyOrig, '_changed'.
	value name: valueOrig, '_changed'.

	t keyedGeneralDictionary rollback.

	self assert: (key name = keyOrig).
	self assert: (value name = valueOrig)!

test30GeneralCollectionRollback

	| t value valueOrig |

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.

	value := t ordered first .
	valueOrig := value name.
	value name: valueOrig, '_changed'.

	t ordered rollback.

	self assert: (value name = valueOrig)!

test31GeneralCollectionRefresh

	| t value valueOrig |

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.

	value := t ordered first .
	valueOrig := value name.
	value name: valueOrig, '_changed'.

	t refresh.

	self assert: (value name = valueOrig)!

test40OwnedSortedCollectionRollback

	"Ensure resorting after rollback"

	| t |

	t := (OwnerTest storedInstancesIn: reStore) last.
	self assert: (t ownedSorted collect: [ :each | each name]) asArray equals: #('owned1' 'owned2').

	"Remove an element, change the name to change ordering relative to other elements; re-add; store"
	t ownedSorted add: 
		(t ownedSorted removeFirst
			name: 'owned3';
			yourself).
	t store.

	self assert: (t ownedSorted collect: [ :each | each name]) asArray equals: #('owned2' 'owned3').

	"Add but rollback"
	reStore beginTransaction.
	t ownedSorted add: (OwnedTest new name: 'owned4').
	reStore rollbackTransaction.

	"Verify ordering is correct (previously failed; sort order of original 1, 2 contents was used)"
	self assert: (t ownedSorted collect: [ :each | each name]) asArray equals: #('owned2' 'owned3')!

test99

	| t |

	"Check cascaded delete"

	reStore clearProxyCache.
	t := (OwnerTest storedInstancesIn: reStore) last.
	reStore beginTransaction.

	self assert: (Test storedInstancesIn: reStore) size equals: (2 "single1, single2" + t set size + t array size + t ordered size + t sorted size + t list size + t aspectDictionary size + t keyedBaseDictionary size + t keyedGeneralDictionary keys size + t keyedGeneralDictionary values size).

	t unstore.
	reStore commitTransaction.

	reStore clearProxyCache.
	self assert: (Test storedInstancesIn: reStore) size equals: 1 "single1 is non-dependent so isn't deleted"! !
!SSWReStoreGeneralTest categoriesForMethods!
_test21GeneralDictionaryRefresh!public!unit tests! !
createTestData!public!running! !
test01Events!public!unit tests! !
test02Rollback!public!unit tests! !
test02RollbackManual!public!unit tests! !
test03Commit!public!unit tests! !
test03CommitManual!public!unit tests! !
test03LinkedQuery!public!unit tests! !
test04!public!unit tests! !
test05!public!unit tests! !
test06!public!unit tests! !
test07!public!unit tests! !
test08!public!unit tests! !
test09!public!unit tests! !
test10!public!unit tests! !
test11!public!unit tests! !
test12!public!unit tests! !
test13!public!unit tests! !
test14!public!unit tests! !
test15!public!unit tests! !
test16!public!unit tests! !
test17!public!unit tests! !
test18!public!unit tests! !
test20GeneralDictionaryRollback!public!unit tests! !
test30GeneralCollectionRollback!public!unit tests! !
test31GeneralCollectionRefresh!public!unit tests! !
test40OwnedSortedCollectionRollback!public!unit tests! !
test99!public!unit tests! !
!

