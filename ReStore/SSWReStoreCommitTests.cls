"Filed out from Dolphin Smallalk"!

SSWReStorePersonTest subclass: #SSWReStoreCommitTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWReStoreCommitTests guid: (GUID fromString: '{b23f6a7e-7018-4b0b-b981-2d45c37064f0}')!
SSWReStoreCommitTests comment: 'ReStore
©2019 John Aspinall
https://github.com/rko281/ReStore'!
!SSWReStoreCommitTests categoriesForClass!Unclassified! !
!SSWReStoreCommitTests methodsFor!

addClassesTo: aReStore

	super addClassesTo: aReStore.
	aReStore
		addClass: OwnerTest;
		addClass: Test!

test01SelfReference

	| obj |

	obj := SimplePerson new firstName: 'Dave'.
	obj friend: obj.
	reStore evaluateAsTransaction: [obj storeIn: reStore].

	reStore simulateReconnect.

	obj := (SimplePerson storedInstancesIn: reStore) first.
	self assert: (obj friend == obj)

	!

test02MultiCommitSameObject

	| obj success people|

	obj := SimplePerson new firstName: 'Dave'.
	reStore evaluateAsTransaction: [obj storeIn: reStore].

	reStore simulateReconnect.

	obj := (SimplePerson storedInstancesIn: reStore) first.
	obj firstName: 'David'.

	self shouldnt: [success := ((Array new: 20) atAllPut: obj; yourself) storeAll] raise: Error.
	self assert: success.

	reStore simulateReconnect.
	people := SimplePerson storedInstancesIn: reStore.
	self assert: (people size = 1).
	obj := people first.
	self assert: (obj firstName = 'David')!

test03MultiStoreSameObject

	| obj success people |

	obj := SimplePerson new firstName: 'Dave'.
	self shouldnt: [success := ((Array with: obj with: obj with: obj with: obj) storeAllIn: reStore)] raise: Error.
	self assert: success.

	reStore simulateReconnect.
	people := SimplePerson storedInstancesIn: reStore.
	self assert: (people size = 1).
	obj := people first.
	self assert: (obj firstName = 'Dave')!

test04MultiStoreSameObjectViaRelationships

	| obj1 obj2 tst success ownerTests tests |

	obj1 := OwnerTest template name: 'owner1'.
	obj2 := OwnerTest template name: 'owner2'.
	tst := Test new name: 'test'.

	"single2 and single3 are dependents"
	obj1 
		single2: tst;
		single3: tst.
	obj2 
		single2: tst;
		single3: tst.

	self shouldnt: [success := ((Array with: obj1 with: obj2 with: tst) storeAllIn: reStore)] raise: Error.
	self assert: success.

	reStore simulateReconnect.
	ownerTests := (OwnerTest storedInstancesIn: reStore) sortBlock: [ :a :b | a name <= b name].
	tests := (Test storedInstancesIn: reStore) sortBlock: [ :a :b | a name <= b name].
	self assert: (ownerTests size = 2).
	self assert: (tests size = 1).
	obj1 := ownerTests first.
	obj2 := ownerTests last.
	self assert: (tests first == obj1 single2).
	self assert: (obj1 single2 == obj1 single3).
	self assert: (tests first == obj2 single2).
	self assert: (obj2 single2 == obj2 single3)!

test05CommitDeletedObject

	reStore beginTransaction.
	self assert: (reStore deferredObjectOfClass: OwnerTest withID: 77) isDBDeleted.
	"At this point it used to be the case that the DeletedObject above was marked as touched,
	and ReStore would crash when committing, even though it's not actually *referenced* from anywhere"
	self shouldnt: [reStore commitTransaction] raise: Error! !
!SSWReStoreCommitTests categoriesForMethods!
addClassesTo:!public!Running! !
test01SelfReference!public! !
test02MultiCommitSameObject!public! !
test03MultiStoreSameObject!public! !
test04MultiStoreSameObjectViaRelationships!public! !
test05CommitDeletedObject!public! !
!

