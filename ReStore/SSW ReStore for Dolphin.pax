| package |
package := Package name: 'SSW ReStore for Dolphin'.
package paxVersion: 1;
	basicComment: 'ReStore
©2019 John Aspinall
https://github.com/rko281/ReStore'.


package classNames
	add: #SSWDBDolphinBlockParser;
	yourself.

package methodNames
	add: #BlockFrame -> #_method:;
	add: #CompiledCode -> #readsOrWritesAnyInstVar;
	add: #CompiledCode -> #sswByteCodeDispatcher;
	add: #CompiledCode -> #sswReadsInstVar:at:;
	add: #CompiledCode -> #sswWritesInstVar:at:;
	add: #DateAndTime -> #withResolution:;
	add: #GUID -> #writeSQLOn:;
	add: #SSWDBBlockArgument -> #isJumpOnNilBytecode:;
	add: #SSWDBBlockArgument -> #postProcessDNU:;
	add: #SSWDBBlockArgument -> #postProcessDNU:from:;
	add: #SSWDBBlockArgument -> #postProcessIfNilFor:in:at:;
	add: #SSWDBBlockArgument -> #preProcessNextMessageFor:in:;
	add: #SSWDBBlockArgument -> #simulateMessageSend:;
	add: #SSWDBBlockArgument -> #simulateMessageSendToFinalField:;
	add: #SSWDBBlockArgument -> #simulateMethod:withArguments:;
	add: #SSWDBBlockArgument -> #stackFrameDetect:;
	add: #SSWDBBlockEvaluator -> #perform:;
	add: #SSWDBBlockEvaluator -> #perform:with:;
	add: #SSWDBBlockEvaluator -> #perform:withArguments:;
	add: #SSWDBDebugMutex -> #defaultDebugClasses;
	add: #SSWDBDebugMutex -> #shouldBypassMutexForDebug;
	add: #SSWDBProxy -> #_allReferences;
	add: #SSWDBProxy -> #_proxyClass;
	add: #SSWDBProxy -> #_proxyInstVarAt:;
	add: #SSWDBProxy -> #basicPrintOn:;
	add: #SSWDBQueryCondition -> #mustBeBoolean;
	add: #SSWDBQueryConditionCollection -> #mustBeBoolean;
	add: #SSWMSAccessDialect -> #dialectReservedWords;
	add: #SSWMSAccessDialect -> #platformSpecificFunctions;
	add: #SSWMySQLDialect -> #platformSpecificFunctions;
	add: #SSWMySQLDialect -> #timestamp;
	add: #SSWPostgreSQLDialect -> #legacyNameTransformationFor:with:;
	add: #SSWPostgreSQLDialect -> #platformSpecificFunctions;
	add: #SSWReStore -> #binaryStoreOn:;
	add: #SSWReStore -> #connectString:;
	add: #SSWReStore -> #createConnection;
	add: #SSWReStore -> #dsn:;
	add: #SSWReStore -> #openODBC;
	add: #SSWReStore -> #pwd:;
	add: #SSWReStore -> #uid:;
	add: #SSWReStore -> #useLegacyNameTransformations;
	add: #SSWSQLDialect -> #dialectReservedWords;
	add: #SSWSQLDialect -> #isReservedWord:;
	add: #SSWSQLDialect -> #legacyNameTransformationFor:with:;
	add: #SSWSQLDialect -> #timestamp;
	add: #SSWSQLDialect -> #useLegacyNameTransformations;
	add: #SSWSQLDialect -> #writeSQLForTimeStamp:on:;
	add: #SSWSQLiteDialect -> #platformSpecificFunctions;
	add: #SSWSQLServerDialect -> #platformSpecificFunctions;
	add: #SSWSQLServerDialect -> #timestamp;
	add: #SSWSQLWriteStream -> #nextPutTimeStamp:;
	add: #StackFrame -> #_method:;
	add: #StackFrame -> #sswByteCodeDispatcher;
	add: #Time -> #withResolution:;
	add: #TimeStamp -> #withResolution:;
	add: #TimeStamp -> #writeSQLOn:;
	add: 'GUID class' -> #instanceFromDBValue:in:;
	add: 'GUID class' -> #isPersistentBaseClass;
	add: 'GUID class' -> #reStoreNewUnique;
	add: 'GUID class' -> #writeSQLTypeOn:using:;
	add: 'SSWDBBlockParser class' -> #platformClass;
	add: 'TimeStamp class' -> #instanceFromDBValue:in:;
	add: 'TimeStamp class' -> #writeSQLTypeOn:using:;
	yourself.

package globalNames
	add: #ReStore;
	yourself.

package binaryGlobalNames: (Set new
	add: #ReStore;
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\IDE\Base\Development System'
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\Core\Object Arts\Dolphin\Base\Dolphin Legacy Date & Time'
	'SSW ReStore Main'
	'SSW ReStore ODBC'
	'SSW ReStore Querying'
	'SSW ReStore SQL Entities'
	'..\Core\Object Arts\Dolphin\ActiveX\Shell\Windows Shell').

package!

"Class Definitions"!

SSWDBBlockParser subclass: #SSWDBDolphinBlockParser
	instanceVariableNames: 'isAccumulatingConditions accumulatedConditionsStack accumulatedConditions currentConditions'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!BlockFrame methodsFor!

_method: aCompiledMethod 

	super method: aCompiledMethod! !
!BlockFrame categoriesForMethods!
_method:!accessing!private! !
!

!CompiledCode methodsFor!

readsOrWritesAnyInstVar

	1 to: self methodClass instSize do: 
		[ :index | 
		(self sswReadsInstVar: 'dummy' at: index) ifTrue: [^true].
		(self sswWritesInstVar: 'dummy' at: index) ifTrue: [^true]].

	^false!

sswByteCodeDispatcher
	"Reimplementation of this method for ReStore use, since the original is in the development category and is stripped during image deployment"

	"Private - Answer a <ByteCodeDispatcher> on the receiver."

	^ByteCodeDispatcher on: self!

sswReadsInstVar: aString at: anInteger 
	"Reimplementation of this method for ReStore use, since the original is in the development category and is stripped during image deployment"

	"Answer whether the receiver accesses the instance variable named, aString, which
	is the instance variable of its method class with the specified <integer> index."

	| extra |
	extra := self extraIndex.
	^((extra between: 1 and: 5) or: [extra == 7]) not 
		and: [self sswByteCodeDispatcher readsInstVarAt: anInteger]!

sswWritesInstVar: aString at: anInteger  
	"Reimplementation of this method for ReStore use, since the original is in the development category and is stripped during image deployment"

	"Answer whether the receiver accesses the instance variable named, aString, which
	is the instance variable of its method class with the specified <integer> index."

	^(self extraIndex between: 1 and: 6) not 
		and: [self sswByteCodeDispatcher writesInstVarAt: anInteger]! !
!CompiledCode categoriesForMethods!
readsOrWritesAnyInstVar!public!testing! !
sswByteCodeDispatcher!accessing!private! !
sswReadsInstVar:at:!public!testing! !
sswWritesInstVar:at:!public!testing! !
!

!DateAndTime methodsFor!

withResolution: anInteger

	"Return a copy of the receiver with the resolution (number of fractional digits) anInteger, i.e. 0 for seconds resolution, 3 for milliseconds etc."

	| multplier |

	multplier := 10 ** anInteger.

	^##(self) new
		setRataDie: rataDie 
		seconds: ((seconds * multplier) truncated / multplier)
		offset: offset! !
!DateAndTime categoriesForMethods!
withResolution:!accessing!public! !
!

!GUID methodsFor!

writeSQLOn: aStream

	self asByteArray writeSQLOn: aStream! !
!GUID categoriesForMethods!
writeSQLOn:!printing!public! !
!

!GUID class methodsFor!

instanceFromDBValue: aValue in: anSSWReStore

	^aValue isNil ifFalse: [self fromBytes: aValue]!

isPersistentBaseClass

	^true!

reStoreNewUnique

	^self newUnique!

writeSQLTypeOn: aStream using: aSQLDialect

	aStream nextPutAll: aSQLDialect uuid! !
!GUID class categoriesForMethods!
instanceFromDBValue:in:!persistency!private! !
isPersistentBaseClass!persistency!private! !
reStoreNewUnique!persistency!private! !
writeSQLTypeOn:using:!persistency!private! !
!

!SSWDBBlockArgument methodsFor!

isJumpOnNilBytecode: anInteger

	^##(Array with: OpcodePool.NearJumpIfNil with: OpcodePool.NearJumpIfNotNil with: OpcodePool.LongJumpIfNil with: OpcodePool.LongJumpIfNotNil) includes: anInteger!

postProcessDNU: anObject

	^self postProcessDNU: anObject from: Processor activeProcess topFrame sender sender!

postProcessDNU: anObject from: aStackFrame

	"Following doesNotUnderstand: handling, pre-check the next bytecode to be executed in the sending stack frame.
	This is necessary to detect the following inlined message combinations:
		isNil
		notNil
		isNil and: [...]
		isNil or: [...]
		notNil and: [...]
		notNil or: [...]
	If these are detected, the isNil/notNil condition is added to the query result and subsequent query processing is modified accordingly"

	| bytecodes ip nextBytecode isJumpIfNil isLongJump checkOffset jumpOffset postCheckBytecode preJumpBytecode postJumpBytecode trueBytecode falseBytecode postCheckResult preJumpResult postJumpResult isNil method |

	bytecodes := aStackFrame method byteCodes.
	ip := aStackFrame ip.
	nextBytecode := bytecodes at: ip.

	"Check for Break bytecode - means we are debugging; need to skip it"
	(nextBytecode = OpcodePool.Break) ifTrue: 
		[ip := ip + ##(ByteCodeDispatcher lengthOfInstruction: OpcodePool.Break).
		nextBytecode := bytecodes at: ip].

	"isNil / notNil in isolation - evaluate as standard = / ~= nil and skip the next bytecode"
	nextBytecode = OpcodePool.ShortSendIsNil ifTrue: 
		[aStackFrame ip: ip + ##(ByteCodeDispatcher lengthOfInstruction: OpcodePool.ShortSendIsNil).
		^anObject = nil].
	nextBytecode = OpcodePool.ShortSendNotNil ifTrue: 
		[aStackFrame ip: ip + ##(ByteCodeDispatcher lengthOfInstruction: OpcodePool.ShortSendNotNil).
		^anObject ~= nil].

	"ifNil: compiles down to a Dup followed byt a JumpIfNil bytecode"
	nextBytecode = OpcodePool.Dup ifTrue: 
		[nextBytecode := bytecodes at: (ip + 1).
		nextBytecode = OpcodePool.LongJumpIfNotNil ifTrue: [self error: 'ifNil: with long jump in query block - cannot handle'].
		nextBytecode = OpcodePool.NearJumpIfNotNil ifTrue: [^self postProcessIfNilFor: anObject in: aStackFrame at: ip + 1]].

	"isNil / notNil followed by and: / or: compile down to a JumpIf(Not)Nil bytecode - this requires special handling"
	(self isJumpOnNilBytecode: nextBytecode) ifFalse: [^self preProcessNextMessageFor: anObject in: aStackFrame].

	"There are 8(!!) different known possibilities to consider when deciding if this is an isNil or notNil test:

	 - JumpIfNil to ^True = isNil
	 - JumpIfNil to ^False = notNil
	 - JumpIfNil to other bytecode with ^True in the jumped-over code = notNil
	 - JumpIfNil to other bytecode without ^True in the jumped-over code = isNil

	 - JumpIfNotNil to ^True = notNil
	 - JumpIfNotNil to ^False = isNil
	 - JumpIfNotNil to other bytecode with ^True in the jumped-over code = isNil
	 - JumpIfNotNil to other bytecode without ^True in the jumped-over code = notNil

	Presumably these could change with a change in the compiler, so we have full SUnit coverage for all combinations"

	checkOffset := ByteCodeDispatcher lengthOfInstruction: nextBytecode.
	isJumpIfNil := (nextBytecode = OpcodePool.NearJumpIfNil or: [nextBytecode = OpcodePool.LongJumpIfNil]).
	isLongJump := (nextBytecode = OpcodePool.LongJumpIfNotNil or: [nextBytecode = OpcodePool.LongJumpIfNil]).

	isLongJump
		ifTrue: [jumpOffset := checkOffset + (bytecodes swordAtOffset: ip)] 
		ifFalse: [jumpOffset := checkOffset + (bytecodes sbyteAtOffset: ip)].

	"Result bytecodes differ between block frames (push result, jump/return) and method frames (return result)"
	postCheckBytecode := bytecodes at: (ip + checkOffset).
	postJumpBytecode := bytecodes at: (ip + jumpOffset).
	aStackFrame isBlockFrame
	ifTrue: 
		[preJumpBytecode := bytecodes at: (ip + jumpOffset - ##((ByteCodeDispatcher lengthOfInstruction: OpcodePool.PushPseudo) + ##(ByteCodeDispatcher lengthOfInstruction: OpcodePool.ReturnFromBlock))).
		trueBytecode := OpcodePool.PushPseudo "PushTrue".
		falseBytecode := ##(OpcodePool.PushPseudo + 1) "PushFalse"]
	ifFalse: 
		[preJumpBytecode := bytecodes at: (ip + jumpOffset - ##(ByteCodeDispatcher lengthOfInstruction: OpcodePool.ReturnPseudo)).
		trueBytecode := OpcodePool.ReturnPseudo. "ReturnTrue"
		falseBytecode := OpcodePool.ReturnFalse].

	postCheckBytecode = trueBytecode ifTrue: [postCheckResult := true].
	preJumpBytecode = trueBytecode ifTrue: [preJumpResult := true].
	postJumpBytecode = falseBytecode ifTrue: [postJumpResult := false].

	(postJumpResult == false or: [postCheckResult == true or: [preJumpResult == true]])
		ifTrue: [isNil := isJumpIfNil not]
		ifFalse: [isNil := isJumpIfNil].

	isNil ifFalse: [isJumpIfNil := isJumpIfNil not].

	"Replace the JumpIf(Not)Nil with a JumpIfFalse to avoid shortcutting of the and: / or: block"	
	bytecodes := bytecodes copy.

	isLongJump
		ifTrue: [bytecodes at: ip put: (isJumpIfNil ifTrue: [OpcodePool.LongJumpIfTrue] ifFalse: [OpcodePool.LongJumpIfFalse])]
		ifFalse: [bytecodes at: ip put: (isJumpIfNil ifTrue: [OpcodePool.NearJumpIfTrue] ifFalse: [OpcodePool.NearJumpIfFalse])].

	method := aStackFrame method copy.
	method setByteCodes: bytecodes.
	aStackFrame _method: method.

	^isNil 
		ifTrue: [anObject = nil]
		ifFalse: [anObject ~= nil]!

postProcessIfNilFor: anObject in: aStackFrame at: ip

	"ifNil: bytecodes consist of:
		Push test case
		Dup
		JumpIfNil to after block
		Block bytecodes beginning Pop
		<continues>.

	We handle this by rewriting as: 
		Push test case
		Dup
		Block bytecodes beginning Pop
		send isNull: 
		<continues>

	Note this is only (relatively easily) possible since the (Near)JumpIfNil consits of two bytes, and the send isNull: also consists of two bytes (if the method isn't too large)"

	| method isNilIndex newMethod bytecodes newBytecodes blockLength blockStart blockEnd newBlockStart newBlockEnd |

	method := aStackFrame method.
	isNilIndex := method literals indexOf: #ifNil:.
	(isNilIndex between: 1 and: 31) ifFalse: [self error: 'cannot handle ifNil: in this query block - try refactoring into a smaller method'].

	bytecodes := method byteCodes.
	blockLength := bytecodes at: ip + 1.
	blockStart := ip + 2.
	blockEnd := blockStart + blockLength - 1.

	"Check for follow-on ifNotNil: block - we can't handle this (yet?)"
	(((bytecodes at: blockEnd) between: OpcodePool.ShortJump and: ##(OpcodePool.ShortJump + 7)) or: [(bytecodes at: blockEnd - 1) = OpcodePool.NearJump or: [(bytecodes at: blockEnd -2) = OpcodePool.LongJump]]) ifTrue: [self error: 'cannnot handle ifNil:ifNotNil: in query block'].

	newBlockStart := ip.
	newBlockEnd := newBlockStart + blockLength - 1.

	newMethod := method copy.
	newBytecodes := bytecodes copyReplaceFrom: newBlockStart to: newBlockEnd with: (bytecodes copyFrom: blockStart to: blockEnd).
	newBytecodes 
		at: newBlockEnd + 1 put: OpcodePool.Send;
		at: newBlockEnd + 2 put: isNilIndex + 31.

	newMethod setByteCodes: newBytecodes.
	aStackFrame _method: newMethod.

	^anObject!

preProcessNextMessageFor: anObject in: aStackFrame

	"Check if the next message needs special handling, usually due to anObject (block evaluator) being an argument rather than the receiver"

	| dispatcher nextMessage |

	dispatcher := aStackFrame sswByteCodeDispatcher.
	nextMessage := dispatcher peekForSelector.

	"Collection>>includes: -> self>>includedIn:"
	(nextMessage = #includes: and: [(anObject isKindOf: SSWDBCollectionBlockReceiver) not]) ifTrue: 
		[aStackFrame ip: dispatcher ip.
		^aStackFrame process at: aStackFrame sp put: (anObject includedIn: (aStackFrame process at: aStackFrame sp))].
	
	"String>>match: -> self>>matches:"
	nextMessage = #match: ifTrue: 
		[aStackFrame ip: dispatcher ip.
		^aStackFrame process at: aStackFrame sp put: (anObject matches: (aStackFrame process at: aStackFrame sp))].

	"No special handling"
	^anObject!

simulateMessageSend: aMessage

	"Attempt to simulate the method named aSymbol in the current class's methodDictionary, turning it into equivalent SQL function(s).
	Limitations - the method (and any methods it invokes) must NOT directly access inst vars, other than simple getter accessor methods.
	Also any messages sent my the method must map to SQL functions in the current dialect.
	If any of these do not hold true a parseError will occur (or possibly something weirder)"

	self hasFinalField ifTrue: [(self simulateMessageSendToFinalField: aMessage) ifNotNil: [ :result | ^result]].

	^(self currentClass lookupMethod: aMessage selector)
		ifNil: [self parseError: '<1d> does not implement <2p>' << {self currentClass. aMessage selector}]
		ifNotNil: [ :method | self simulateMethod: method withArguments: aMessage arguments]!

simulateMessageSendToFinalField: aMessage

	"Private - Attempt to simulate sending aMessage to the targetClass of the receiver's finalField.
	Only simulate messages implemented by and in directly-persisted non-base classes (e.g. implementations in Object are ignored).
	Return nil if no method is simulated, otherwise the result of the simulated send"

	| field targetClass reStoreValueMethod messages method |

	field := self peekFinalField.
	targetClass := field targetClass.
	targetClass isDirectlyPersistedNonBaseClass ifFalse: [^nil].

	method := targetClass lookupMethod: aMessage selector.
	(method isNil or: [method methodClass isDirectlyPersistedNonBaseClass not]) ifTrue: [^nil].

	"Check if aMessage is the sole message sent by the implementation of #reStoreValue - shortcut this to reStoreValue"
	reStoreValueMethod  := targetClass lookupMethod: #reStoreValue.
	reStoreValueMethod isNil ifTrue: [self parseError: '<1d> does not implement #reStoreValue' << targetClass].

	messages := reStoreValueMethod messages.
	(messages size = 1 and: [messages anyOne = aMessage selector]) ifTrue: 
		[field targetClass: targetClass reStoreValueClass.
		^self].

	^self simulateMethod: method withArguments: aMessage arguments!

simulateMethod: aCompiledMethod withArguments: aCollection

	| method |

	"Check the method has no direct inst var accesses - we can't allow these since the method is actually evaluated with the receiver as, er, the receiver..."
	aCompiledMethod readsOrWritesAnyInstVar ifTrue: [self parseError: '<1p> directly accesses inst vars - cannot convert to SQL' << aCompiledMethod].

	"Make a local copy of the method in this class in order to invoke it"
	method := aCompiledMethod copy.
	method methodClass: self basicClass.

	"Try it!!"
	^method value: self withArguments: aCollection!

stackFrameDetect: aBlock

	| frame |

	"Skip this frame and its sender"
	frame := Processor activeProcess topFrame sender sender. 

	[(aBlock value: frame) or: [(frame := frame sender) isNil]] whileFalse.

	^frame! !
!SSWDBBlockArgument categoriesForMethods!
isJumpOnNilBytecode:!parsing - internal!private! !
postProcessDNU:!parsing - internal!public! !
postProcessDNU:from:!parsing - internal!private! !
postProcessIfNilFor:in:at:!parsing - internal!private! !
preProcessNextMessageFor:in:!parsing - internal!private! !
simulateMessageSend:!helpers!public! !
simulateMessageSendToFinalField:!helpers!private! !
simulateMethod:withArguments:!helpers!private! !
stackFrameDetect:!public! !
!

!SSWDBBlockEvaluator methodsFor!

perform: selector
	"Send the receiver the unary message indicated by the <selector> argument, answering the result. 

	Primitive failure reasons:
		InvalidSelector		- selector is not a Symbol
		WrongNumberOfArgs	- The number of arguments expected with the selector is not zero."

	<primitive: 83>
	^Error
		performFailed: _failureCode
		of: selector
		for: self
		withArgs: {}!

perform: selector with: argument1
	"Send the receiver the keyword message indicated by the arguments, answering the result. 
	The first argument selector is the <selector> of the message. The second <Object> argument,  argument1, is the argument of the message to be sent. 

	Primitive failure reasons:
		InvalidSelector		- selector is not a Symbol
		WrongNumberOfArgs	- The number of arguments expected with the selector is not one."

	<primitive: 83>
	^Error
		performFailed: _failureCode
		of: selector
		for: self
		withArgs: {argument1}!

perform: selector withArguments: arguments
	"Send the receiver the keyword message indicated by the arguments, answering the result. 
	The first argument, selector, is the <selector> of the message. The arguments of the message 
	are the elements of the <Array>, arguments. 

	Primitive failure reasons:
		InvalidParameter1	- selector is not a Symbol
		InvalidParameter2	- arguments is not an Array
		WrongNumberOfArgs	- The number of arguments expected with the selector is not the size of the arguments."

	<primitive: 84>
	^Error
		performFailed: _failureCode
		of: selector
		for: self
		withArgs: arguments! !
!SSWDBBlockEvaluator categoriesForMethods!
perform:!message sending!public! !
perform:with:!message sending!public! !
perform:withArguments:!message sending!public! !
!

!SSWDBBlockParser class methodsFor!

platformClass

	^SSWDBDolphinBlockParser! !
!SSWDBBlockParser class categoriesForMethods!
platformClass!constants!public! !
!

!SSWDBDebugMutex methodsFor!

defaultDebugClasses

	^{Debugger. InspectorAbstract. BasicInspector. InspectorShell. FlipperInspector}!

shouldBypassMutexForDebug

	| topFrame |

	topFrame := Processor activeProcess topFrame sender.

	[topFrame notNil] whileTrue: 
		[(debugClasses anySatisfy: [:each | topFrame receiver basicClass includesBehavior: each]) ifTrue: [^true].
		topFrame := topFrame sender].

	^false.! !
!SSWDBDebugMutex categoriesForMethods!
defaultDebugClasses!constants!public! !
shouldBypassMutexForDebug!public!testing! !
!

!SSWDBProxy methodsFor!

_allReferences

	"For references to the receiver, not the proxiedObject"

	<primitive: 153>
	^nil primitiveFailed: _failureCode!

_proxyClass

	^super basicClass!

_proxyInstVarAt: index

	^super instVarAt: index!

basicPrintOn: aStream

	aStream nextPutAll: self debugPrintString! !
!SSWDBProxy categoriesForMethods!
_allReferences!non forwarding!public! !
_proxyClass!accessing:direct!private! !
_proxyInstVarAt:!accessing:direct!private! !
basicPrintOn:!accessing:direct!private! !
!

!SSWDBQueryCondition methodsFor!

mustBeBoolean

	"Private - Received when this condition has been subject to an inlined and: / or: message in a query block.
	Ask the parser to handle"

	^self parser handleMustBeBooleanIn: self! !
!SSWDBQueryCondition categoriesForMethods!
mustBeBoolean!evaluating!private! !
!

!SSWDBQueryConditionCollection methodsFor!

mustBeBoolean

	"Private - Received when this condition has been subject to an inlined and: / or: message in a query block.
	Ask the parser to handle"

	^self parser handleMustBeBooleanIn: self! !
!SSWDBQueryConditionCollection categoriesForMethods!
mustBeBoolean!evaluating!private! !
!

!SSWMSAccessDialect methodsFor!

dialectReservedWords

	"Access 2013 (and others?) appears to (sometimes?) truncate the result of SQL_KEYWORDS to 255 characters, omitting some important reserved words (e.g. NUMBER).
	Attempt to handle this by returning a hardcoded set here"

	^#('ALPHANUMERIC' 'AUTOINCREMENT' 'BINARY' 'BYTE' 'COUNTER' 'CURRENCY' 'DATABASE' 'DATABASENAME' 'DATETIME' 'DISALLOW' 'DISTINCTROW' 'DOUBLEFLOAT' 'FLOAT4' 'FLOAT8' 'GENERAL' 'IEEEDOUBLE' 'IEEESINGLE' 'IGNORE' 'INT' 'INTEGER1' 'INTEGER2' 'INTEGER4' 'LEVEL' 'LOGICAL' 'LOGICAL1' 'LONG' 'LONGBINARY' 'LONGCHAR' 'LONGTEXT' 'MEMO' 'MONEY' 'NOTE' 'NUMBER' 'OLEOBJECT' 'OPTION' 'OWNERACCESS' 'PARAMETERS' 'PERCENT' 'PIVOT' 'SHORT' 'SINGLE' 'SINGLEFLOAT' 'SMALLINT' 'STDEV' 'STDEVP' 'STRING' 'TABLEID' 'TEXT' 'TOP' 'TRANSFORM' 'UNSIGNEDBYTE' 'VALUES' 'VAR' 'VARBINARY' 'VARP' 'YESNO')!

platformSpecificFunctions

	^Dictionary new
		at: #month put: 'DATEPART(''m'',%1)' asSQLFunctionIntegerResult;
		yourself! !
!SSWMSAccessDialect categoriesForMethods!
dialectReservedWords!constants!public! !
platformSpecificFunctions!constants!public! !
!

!SSWMySQLDialect methodsFor!

platformSpecificFunctions

	^Dictionary new
		at: #month put: 'MONTH(%1)' asSQLFunctionIntegerResult;
		yourself!

timestamp

	^'DATETIME'! !
!SSWMySQLDialect categoriesForMethods!
platformSpecificFunctions!constants!public! !
timestamp!datatypes!public! !
!

!SSWPostgreSQLDialect methodsFor!

legacyNameTransformationFor: aSymbol with: aString

	"ReStore has always used lowercase with Postgres"

	^(super legacyNameTransformationFor: aSymbol with: aString) asLowercase!

platformSpecificFunctions

	^Dictionary new
		at: #month put: 'EXTRACT(MONTH FROM %1)' asSQLFunctionIntegerResult;
		yourself! !
!SSWPostgreSQLDialect categoriesForMethods!
legacyNameTransformationFor:with:!helpers!private! !
platformSpecificFunctions!constants!public! !
!

!SSWReStore methodsFor!

binaryStoreOn: aStream 

	"Override so the ReStore global is stored as a singleton proxy when saving the package (rather than a binary global)"

	self == ##(self) globalDefault ifFalse: [^super binaryStoreOn: aStream].

	(STBOutFiler on: aStream) 
		override: self with: (STBSingletonProxy forClass: ##(self) using: #globalDefault);
		nextPut: self!

connectString: aString

	"Forward to the connection itself"

	self connection isNil ifTrue: [self createConnection].
	self connection connectString: aString!

createConnection

	self connection: SSWODBCConnection new!

dsn: aString

	"Forward to the connection itself"

	self connection isNil ifTrue: [self createConnection].
	self connection dsn: aString!

openODBC

	"Convenience - open the 32bit ODBC control panel"

	ShellLibrary default shellOpen: 'odbcad32'!

pwd: aString

	"Forward to the connection itself"
	
	self connection isNil ifTrue: [self createConnection].
	self connection pwd: aString!

uid: aString

	"Forward to the connection itself"
	
	self connection isNil ifTrue: [self createConnection].
	self connection uid: aString!

useLegacyNameTransformations

	"Previously ReStore translated inst var and class names to database names as follows:
	1) transform to uppercase snake case, e.g. dateOfBirth to DATE_OF_BIRTH
	2) append _FIELD (inst var) or _TABLE (class name) if the name is reserved, e.g. Order -> ORDER -> ORDER_TABLE

	ReStore now uses lowercase snake case, with all identifiers quoted to avoid reserved word clashes..

	Send this method after connecting to continue to use the previous transformations"

	self sqlDialect useLegacyNameTransformations.

	"Must reset system classes after login to use current dialect's name transformation strategy"
	self persistentSystemClasses do: [ :each | self addClass: each]! !
!SSWReStore categoriesForMethods!
binaryStoreOn:!binary filing!public! !
connectString:!connection!public! !
createConnection!initialize/release!public! !
dsn:!connection!public! !
openODBC!connection!public! !
pwd:!connection!public! !
uid:!connection!public! !
useLegacyNameTransformations!initialize/release!public! !
!

!SSWSQLDialect methodsFor!

dialectReservedWords

	"Reserved words are Strings which cannot be used for field or table names in this SQL Dialect. 
	Thse are usually known by the connection, however if a dialect includes additional reserved words unknown by the connection, they should be returned here.

	Clients should use isReservedWord: to check if a word is reserved"

	^#()!

isReservedWord: aString

	^(self dialectReservedWords includes: aString asUppercase) or: 
		[self connection reservedWords includes: aString asUppercase]!

legacyNameTransformationFor: aSymbol with: aString

	"Private - Transform the given Symbol into a DB-style String appropriate/conventional for this dialect, using the strategy used in older versions of ReStore.
	This also checks for reserved word clashes and handles by appending aString to the transformed name"

	| transformedName |

	transformedName := aSymbol sswInUnderscoreFormat asUppercase.

	^(self isReservedWord: transformedName) 
		ifTrue: [transformedName, aString]
		ifFalse: [transformedName]!

timestamp

	^self datetime!

useLegacyNameTransformations

	"Private - Previously ReStore translated inst var and class names to database names as follows:
	1) transform to uppercase snake case, e.g. dateOfBirth to DATE_OF_BIRTH
	2) append _FIELD (inst var) or _TABLE (class name) if the name is reserved, e.g. Order -> ORDER -> ORDER_TABLE

	ReStore now uses lowercase snake case, with all identifiers quoted to avoid reserved word clashes..

	Send this method to your ReStore instance after connecting to continue to use the previous transformations"

	self 
		instVarNameTransformation: [ :name | self legacyNameTransformationFor: name with: '_FIELD'];
		classNameTransformation: [ :name | self legacyNameTransformationFor: name with: '_TABLE']!

writeSQLForTimeStamp: aTimeStamp on: aStream

	"For multi-datasource compatability, use standard ODBC date escape sequence {ts 'yyyy-MM-dd hh:mm:ss'}.
	Subclasses may override to do their own thing"

	aStream 
		nextPutAll: '{ts';
		nextPut: $'.
	aTimeStamp date printOn: aStream format: 'yyyy-MM-dd'.
	aStream space.
	aTimeStamp time printOn: aStream format: 'HH:mm:ss'.
	aStream
		nextPut: $';
		nextPut: $}! !
!SSWSQLDialect categoriesForMethods!
dialectReservedWords!constants!public! !
isReservedWord:!public!testing! !
legacyNameTransformationFor:with:!helpers!private! !
timestamp!datatypes!public! !
useLegacyNameTransformations!initializing!private! !
writeSQLForTimeStamp:on:!public!writing sql! !
!

!SSWSQLiteDialect methodsFor!

platformSpecificFunctions

	^Dictionary new
		at: #month put: 'CAST(STRFTIME(''%%m'',%1) AS INTEGER)' asSQLFunctionIntegerResult;
		yourself! !
!SSWSQLiteDialect categoriesForMethods!
platformSpecificFunctions!constants!public! !
!

!SSWSQLServerDialect methodsFor!

platformSpecificFunctions

	^Dictionary new
		at: #month put: 'MONTH(%1)' asSQLFunctionIntegerResult;
		yourself!

timestamp

	^'DATETIME'! !
!SSWSQLServerDialect categoriesForMethods!
platformSpecificFunctions!constants!public! !
timestamp!datatypes!public! !
!

!SSWSQLWriteStream methodsFor!

nextPutTimeStamp: aTimeStamp

	self dialect writeSQLForTimeStamp: aTimeStamp on: self! !
!SSWSQLWriteStream categoriesForMethods!
nextPutTimeStamp:!printing!public! !
!

!StackFrame methodsFor!

_method: aCompiledMethod 

	self method: aCompiledMethod!

sswByteCodeDispatcher

	"Return a ByteCodeDispatcher on the receiver's method, initialized at the same IP as the receiver.
	Named to match the copied non-dev implementation in CompiledCode"

	^self method sswByteCodeDispatcher
		ip: self ip;
		yourself! !
!StackFrame categoriesForMethods!
_method:!accessing!private! !
sswByteCodeDispatcher!accessing!private! !
!

!Time methodsFor!

withResolution: anInteger

	"Return a copy of the receiver with the resolution (number of fractional digits) anInteger, i.e. 0 for seconds resolution, 3 for milliseconds etc."

	| multiplier |

	multiplier := 10 ** anInteger.

	^Time fromSeconds: ((seconds * multiplier) rounded / multiplier)! !
!Time categoriesForMethods!
withResolution:!public! !
!

!TimeStamp methodsFor!

withResolution: anInteger

	^TimeStamp date: self date time: (self time withResolution: anInteger)!

writeSQLOn: aStream

	"Defer to the Stream to account for dialect differences"
	aStream nextPutTimeStamp: self! !
!TimeStamp categoriesForMethods!
withResolution:!accessing!public! !
writeSQLOn:!converting!printing!public! !
!

!TimeStamp class methodsFor!

instanceFromDBValue: aValue in: anSSWReStore

	"aValue may be a TimeStamp, a Date or a Time depending on database supported types"
	^aValue ifNotNil: [aValue asTimeStamp]!

writeSQLTypeOn: aStream using: anSQLDialect

	"9/3/01"
	
	aStream nextPutAll: anSQLDialect timestamp! !
!TimeStamp class categoriesForMethods!
instanceFromDBValue:in:!instance creation!public! !
writeSQLTypeOn:using:!printing!public! !
!

"End of package definition"!

