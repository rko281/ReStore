| package |
package := Package name: 'SSW ReStore Main'.
package paxVersion: 1;
	basicComment: 'ReStore
©2019 John Aspinall
https://github.com/rko281/ReStore'.


package classNames
	add: #SSWDBAbstractSingleTransaction;
	add: #SSWDBAllocatedID;
	add: #SSWDBCachingObjectProxy;
	add: #SSWDBCollectionProxy;
	add: #SSWDBCollectionWithContents;
	add: #SSWDBCollectionWithRelatedContents;
	add: #SSWDBDumbTransaction;
	add: #SSWDBGeneralCollectionProxy;
	add: #SSWDBObjectProxy;
	add: #SSWDBObjectWithComponents;
	add: #SSWDBObjectWithRelatedComponents;
	add: #SSWDBOwnedCollectionProxy;
	add: #SSWDBProxy;
	add: #SSWDBSingleTransaction;
	add: #SSWDBSingleTransactionWithVersioning;
	add: #SSWDBTableRecord;
	add: #SSWDBTransaction;
	add: #SSWDBUnstoreWrapper;
	add: #SSWDBVersionedCachingObjectProxy;
	add: #SSWReStore;
	add: #StoreFailure;
	yourself.

package methodNames
	add: #Class -> #isValidForPersistence;
	add: #Class -> #reStoreValue;
	add: #Class -> #writeSQLOn:;
	add: #Collection -> #hasAnyChanged;
	add: #Collection -> #refreshAll;
	add: #Collection -> #rollbackAll;
	add: #Collection -> #store;
	add: #Collection -> #storeAll;
	add: #Collection -> #storeAllIn:;
	add: #Collection -> #unstoreAll;
	add: #Collection -> #withComponents;
	add: #Collection -> #withRelatedComponents;
	add: #Object -> #_changedObjectsIn:;
	add: #Object -> #_checkHasChangedIn:;
	add: #Object -> #_commitIn:;
	add: #Object -> #_dbProxy;
	add: #Object -> #_dbProxyIfNone:;
	add: #Object -> #_dbProxyIn:;
	add: #Object -> #_dbProxyIn:ifNone:;
	add: #Object -> #_ensureActiveIn:;
	add: #Object -> #_ensurePersistentIn:;
	add: #Object -> #_forceRefreshIn:;
	add: #Object -> #_forceRefreshWithContents;
	add: #Object -> #_hasChangedFrom:;
	add: #Object -> #_id;
	add: #Object -> #_idIn:;
	add: #Object -> #_isRecovered;
	add: #Object -> #_refreshIfUpdatedIn:;
	add: #Object -> #_refreshIn:;
	add: #Object -> #_refreshWithContents;
	add: #Object -> #_refreshWithContentsIfUpdated;
	add: #Object -> #_reStore;
	add: #Object -> #_reStoreIfNone:;
	add: #Object -> #_rollbackIn:;
	add: #Object -> #_touch;
	add: #Object -> #errorNotPersistent;
	add: #Object -> #handleUpdateClash:from:to:;
	add: #Object -> #hasChanged;
	add: #Object -> #isDBDeleted;
	add: #Object -> #isDBProxy;
	add: #Object -> #isPersistent;
	add: #Object -> #isValidForPersistence;
	add: #Object -> #mergeUpdate:from:;
	add: #Object -> #mergeUpdateFrom:newValue:accessor:;
	add: #Object -> #onAboutToUnstore;
	add: #Object -> #onRefresh;
	add: #Object -> #onRollback;
	add: #Object -> #onUnstored;
	add: #Object -> #refresh;
	add: #Object -> #reStoreValue;
	add: #Object -> #rollback;
	add: #Object -> #safeHandleUpdateClash:from:to:;
	add: #Object -> #safeMergeUpdateFrom:newValue:accessor:;
	add: #Object -> #similarInstances;
	add: #Object -> #similarInstancesIn:;
	add: #Object -> #store;
	add: #Object -> #storeIn:;
	add: #Object -> #storeInAnsweringProxy:;
	add: #Object -> #unstore;
	add: #Object -> #unstored;
	add: #Object -> #withComponents;
	add: #Object -> #withRelatedComponents;
	add: #Object -> #writeSQLOn:;
	add: #Process -> #reStore;
	add: #Process -> #reStore:;
	add: #SSWDBClassWithInfo -> #instanceFromDBValue:in:;
	add: #SSWDBDateAndTimeWithResolution -> #instanceFromDBValue:in:;
	add: #SSWDBGeneralCollectionSpec -> #collectionProxyClass;
	add: #SSWDBOwnedCollectionSpec -> #collectionProxyClass;
	add: #SSWDBScaledDecimalWithInfo -> #instanceFromDBValue:in:;
	add: #SSWDBTable -> #tableRecord;
	add: #SSWDBTable -> #versionControlField;
	add: #SSWDBTable -> #withIDAndVersionFields;
	add: #String -> #withComponents;
	add: #String -> #withRelatedComponents;
	add: #UndefinedObject -> #storeIn:;
	add: #UndefinedObject -> #unstore;
	add: 'Boolean class' -> #instanceFromDBValue:in:;
	add: 'ByteArray class' -> #instanceFromDBValue:in:;
	add: 'Date class' -> #instanceFromDBValue:in:;
	add: 'DateAndTime class' -> #instanceFromDBValue:in:;
	add: 'Metaclass class' -> #instanceFromDBValue:in:;
	add: 'Number class' -> #instanceFromDBValue:in:;
	add: 'Object class' -> #instanceFromDBValue:in:;
	add: 'Object class' -> #preferredObjectProxyClass;
	add: 'Object class' -> #storedInstances;
	add: 'Object class' -> #storedInstancesIn:;
	add: 'String class' -> #instanceFromDBValue:in:;
	add: 'Time class' -> #instanceFromDBValue:in:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\Core\Object Arts\Dolphin\Base\Dolphin Legacy Date & Time'
	'SSW ReStore Base Additions'
	'SSW ReStore Collections'
	'SSW ReStore Querying'
	'SSW ReStore SQL Entities'
	'SSW ReStore SQL Queries'
	'SSW ReStore Tables').

package!

"Class Definitions"!

Object subclass: #SSWDBAllocatedID
	instanceVariableNames: 'tableRecord offset object'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #SSWDBTableRecord
	instanceVariableNames: 'tableName fullTableName nextID'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #SSWDBTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #SSWReStore
	instanceVariableNames: 'connection tableCache nextIDCache nextIDStatement proxyCache transactionClass transaction objectProxyClass dbTableNames transactionMutex supportsFullTableRecords readAllBatchSize affiliations'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: 'globalDefault activeReStores'!
Notification subclass: #StoreFailure
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBTransaction subclass: #SSWDBAbstractSingleTransaction
	instanceVariableNames: 'allReferencedObjects currentReferencedObjects activeProxiesMap changedObjects allocatedIDs deletedObjects'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBAbstractSingleTransaction subclass: #SSWDBDumbTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBAbstractSingleTransaction subclass: #SSWDBSingleTransaction
	instanceVariableNames: 'updateStatementsCache'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBSingleTransaction subclass: #SSWDBSingleTransactionWithVersioning
	instanceVariableNames: 'proxyCommitFailures'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBWrapper subclass: #SSWDBObjectWithComponents
	instanceVariableNames: 'exclusions originatingComponent'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBWrapper subclass: #SSWDBUnstoreWrapper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBObjectWithComponents subclass: #SSWDBCollectionWithContents
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBObjectWithComponents subclass: #SSWDBObjectWithRelatedComponents
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBObjectWithRelatedComponents subclass: #SSWDBCollectionWithRelatedContents
	instanceVariableNames: 'cachedProxy'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
ProtoObject subclass: #SSWDBProxy
	instanceVariableNames: 'proxiedObject reStore'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBProxy subclass: #SSWDBCollectionProxy
	instanceVariableNames: 'collectionSpec owner'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBProxy subclass: #SSWDBObjectProxy
	instanceVariableNames: 'class id collectionProxies'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCollectionProxy subclass: #SSWDBGeneralCollectionProxy
	instanceVariableNames: 'collectionEntries changes isDeleted'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCollectionProxy subclass: #SSWDBOwnedCollectionProxy
	instanceVariableNames: 'copyCollection'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBObjectProxy subclass: #SSWDBCachingObjectProxy
	instanceVariableNames: 'copyObject'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCachingObjectProxy subclass: #SSWDBVersionedCachingObjectProxy
	instanceVariableNames: 'version'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!Boolean class methodsFor!

instanceFromDBValue: aValue in: anSSWReStore

	^aValue == true or: [aValue = anSSWReStore sqlDialect trueObject]! !
!Boolean class categoriesFor: #instanceFromDBValue:in:!instance creation!private! !

!ByteArray class methodsFor!

instanceFromDBValue: aValue in: anSSWReStore

	"ASSERT: aValue isNil OR aValue isKindOf: self"

	^aValue! !
!ByteArray class categoriesFor: #instanceFromDBValue:in:!instance creation!public! !

!Class methodsFor!

isValidForPersistence

	"Classes are not persisted directly (e.g. via storeIn:), therefore consider them already persistent"
	
	^true!

reStoreValue

	^self name asString!

writeSQLOn: aStream

	self name asString printOn: aStream! !
!Class categoriesFor: #isValidForPersistence!private!testing! !
!Class categoriesFor: #reStoreValue!accessing!public! !
!Class categoriesFor: #writeSQLOn:!accessing!public! !

!Collection methodsFor!

hasAnyChanged

	"Return whether any elements of the receiver or their related objects have changed in the image since loading from the ReStore instance in which they reside"

	^self isEmpty not and: [(self anyOne _reStoreIfNone: [self errorNotPersistent]) haveAnyChanged: (self collect: [ :each | each withRelatedComponents])]!

refreshAll

	"Refresh the elements of the receiver and their related objects to their stored state in the ReStore in which they reside"

	self isEmpty ifFalse: [(self anyOne _reStoreIfNone: [self errorNotPersistent]) refreshAll: (self collect: [ :each | each withRelatedComponents])]!

rollbackAll

	"Rollback the elements of the receiver and their related objects to their previous state in the ReStore in which they reside"

	self isEmpty ifFalse: [(self anyOne _reStoreIfNone: [self errorNotPersistent]) rollbackAll: (self collect: [ :each | each withRelatedComponents])]!

store

	"Override to prevent attempt to store a non-persistent collection independently of its owner"

	^self storeIn: (self _reStoreIfNone: [self errorNotPersistent])!

storeAll

	"Store the elements of the receiver and their related objects in their ReStore or the default ReStore if not yet persistent, returning success.
	In the event of a failure the default action is to abandon the failed transaction leaving the receiver in its current state. 
	To handle transaction failure manually (e.g. to rollback and refresh) trap ObjectCommitFailure"

	"ASSERT: all elements of the receiver belong to the same ReStore instance (or none, if not yet persistent)"

	^self isEmpty 
		ifTrue: [true]
		ifFalse: [self storeAllIn: (self anyOne _reStoreIfNone: [SSWReStore default])]!

storeAllIn: aReStore

	"Private - Store the elements of the receiver and their related objects in aReStore; return success.
	In the event of a failure the default action is to abandon the failed transaction leaving the elements of the receiver in their current state. 
	To handle transaction failure manually (e.g. to rollback and refresh) trap StoreFailure"

	^(aReStore commitAll: (self collect: [:each | each withRelatedComponents]))
		ifTrue: [true]
		ifFalse: [StoreFailure signalWith: aReStore. false]!

unstoreAll

	"Unstore (delete) the elements of the receiver in the ReStore in which they reside. 
	Dependent objects will also be unstored"

	^self isEmpty 
		ifTrue: [true]
		ifFalse: [(self anyOne _reStoreIfNone: [self errorNotPersistent]) commitAll: (self collect: [ :each | each unstored])]!

withComponents

	^SSWDBCollectionWithContents on: self!

withRelatedComponents

	^SSWDBCollectionWithRelatedContents on: self! !
!Collection categoriesFor: #hasAnyChanged!public!restore-api!testing! !
!Collection categoriesFor: #refreshAll!public!restore-api! !
!Collection categoriesFor: #rollbackAll!public!restore-api! !
!Collection categoriesFor: #store!public!restore-api! !
!Collection categoriesFor: #storeAll!public!restore-api! !
!Collection categoriesFor: #storeAllIn:!public!restore-api! !
!Collection categoriesFor: #unstoreAll!public!restore-api! !
!Collection categoriesFor: #withComponents!converting!public! !
!Collection categoriesFor: #withRelatedComponents!converting!public! !

!Date class methodsFor!

instanceFromDBValue: aValue in: anSSWReStore

	"aValue may be some other object which can convert itself to a Date"
	
	^(aValue isNil or: [aValue class = Date])
		ifTrue: [aValue]
		ifFalse: [anSSWReStore sqlDialect dateFrom: aValue]! !
!Date class categoriesFor: #instanceFromDBValue:in:!instance creation!private! !

!DateAndTime class methodsFor!

instanceFromDBValue: aValue in: anSSWReStore

	"aValue may be nil, a DateAndTime, a Date or a Time depending on database supported types"
	^(aValue isNil or: [aValue class == DateAndTime])
		ifTrue: [aValue]
		ifFalse: [anSSWReStore sqlDialect dateAndTimeFrom: aValue]! !
!DateAndTime class categoriesFor: #instanceFromDBValue:in:!instance creation!public! !

!Metaclass class methodsFor!

instanceFromDBValue: aValue in: anSSWReStore

	"Classes are represented by name"

	^aValue ifNotNil: [ :clsName | self class environment at: clsName asSymbol ifAbsent: [self error: 'Class not in image']]! !
!Metaclass class categoriesFor: #instanceFromDBValue:in:!instance creation!private! !

!Number class methodsFor!

instanceFromDBValue: aValue in: anSSWReStore

	"ASSERT: aValue isNil OR aValue isKindOf: self"

	^aValue! !
!Number class categoriesFor: #instanceFromDBValue:in:!instance creation!public! !

!Object methodsFor!

_changedObjectsIn: aReStore

	^(self _checkHasChangedIn: aReStore)
		ifTrue: [Array with: self]
		ifFalse: [#()]!

_checkHasChangedIn: aReStore

	"Assuming the receiver is (or will be) a persistent object in aReStore, has it changed from the persisted version?"

	"Redirect to the proxy"
	^(self _dbProxyIn: aReStore ifNone: [nil])
		ifNil: [self isValidForPersistence not] "since a commit of a non-valid (i.e. non-base class) object will result in a write (insert)"
		ifNotNil: [ :proxy | proxy _checkHasChangedIn: aReStore]!

_commitIn: aReStore

	"Should only be sent when all proxied objects have been swapped out to their proxy,
	therefore the receiver is not currently persistent, therefore store it"

	"...however if the object is encountered multiple times during a commitObjects: operation, its proxy will have flipped to the object"
	(aReStore isInCurrentTransaction: self) ifFalse: 
		"isValidForPersistence test excludes base object types (String, Number etc.)"
		[self isValidForPersistence ifFalse: [self storeInAnsweringProxy: aReStore]]!

_dbProxy

	"Attempt to locate the SSWDBObjectProxy wrapping this object.
	Error if none can be found (i.e. the receiver is not persistent)"
	
	^self _dbProxyIfNone: [self error: 'Cannot locate ReStore proxy']!

_dbProxyIfNone: aBlock

	"Attempt to locate the SSWDBObjectProxy wrapping this object.
	Return the value of aBlock if none can be found (i.e. the receiver is not persistent)"
	
	^SSWReStore proxyForObject: self ifNone: aBlock!

_dbProxyIn: aReStore

	^self _dbProxyIn: aReStore ifNone: [self error: 'Cannot locate ReStore proxy']!

_dbProxyIn: aReStore ifNone: aBlock
	
	^aReStore activeProxyForObject: self ifNone: aBlock!

_ensureActiveIn: anSSWReStore

	"Ensure that the receiver is 'active' in the given ReStore 
	'active' means persistent in anSSWReStore, and present in the current transaction.

	If this message is received by a real object it is either not persistent, or persistent and active.
	Hence - only need to ensure persistence"
	
	self _ensurePersistentIn: anSSWReStore!

_ensurePersistentIn: anSSWReStore

	"Ensure that the receiver is persistent in the given ReStore.
	When received by a non-proxy object, the receiver is either non-persistent (store it) or already in the current transaction (do nothing)"

	(self isValidForPersistence or: [anSSWReStore isInCurrentTransaction: self]) ifFalse: [self storeInAnsweringProxy: anSSWReStore]!

_forceRefreshIn: aReStore

	"Private - Non-persistent - cannot have changed - do nothing"

	^self
!

_forceRefreshWithContents

	"Private - Non-persistent - cannot have changed - do nothing.
	Return the refreshed contents (i.e. none)"

	^#()!

_hasChangedFrom: anObject

	"Return a Boolean indicating whether the receiver has changed in state from anObject.
	Default test - is it equal? 
	Subclasses with other definitions of 'state' should override"

	self == anObject ifTrue: [^false].
	
	^self isValidForPersistence 
		ifTrue: [self ~= anObject]
		ifFalse: [true]!

_id

	"Return the receiver's unique ID or nil if not persistent"

	^(self _dbProxyIfNone: [nil]) ifNotNil: [ :proxy | proxy _id]!

_idIn: aReStore

	"Return the receiver's unique ID as a proxy in the given ReStore instance"
	
	^(self _dbProxyIn: aReStore) _id!

_isRecovered

	"The receiver is a real object, therefore it is recovered from the database
	(compared to an unrecovered proxy - we do not consider the case where the receiver is non-persistent)"

	^true!

_refreshIfUpdatedIn: aReStore

	"Private - Non-persistent - cannot have been updated externally - do nothing"

	^self
!

_refreshIn: aReStore

	"Private - Non-persistent - cannot have changed - do nothing"

	^self
!

_refreshWithContents

	"Private - Non-persistent - cannot have changed - do nothing.
	Return the refreshed contents (i.e. none)"

	^#()!

_refreshWithContentsIfUpdated

	"Private - Non-persistent - cannot have changed - do nothing.
	Return the refreshed objects (i.e. none)"

	^#()!

_reStore

	"Attempt to locate the SSWReStore in which the receiver resides.
	Return nil if none can be found (i.e. the receiver is not persistent)"

	^self _reStoreIfNone: [nil]!

_reStoreIfNone: aBlock

	"Attempt to locate the SSWReStore in which the receiver resides.
	Return the result of aBlock if none can be found (i.e. the receiver is not persistent)"

	^SSWReStore reStoreForObject: self ifNone: aBlock!

_rollbackIn: aReStore

	"Should only be sent when all proxied objects have been swapped out to their proxy,
	therefore the receiver is not currently persistent, therefore do nothing"!

_touch

	"No-op to ensure the receiver (a persistent object) has been encountered during the current ReStore transaction"!

errorNotPersistent

	self error: 'object not persistent'!

handleUpdateClash: aSymbol from: oldVersion to: newVersion

	"A change in the receiver to the instance variable named aSymbol 
	has clashed with a change made in the database.
	oldVersion is a copy of the receiver as it was prior to its current updates.
	newVersion is a copy of the receiver as it currently is in the database.
	Analyse changes between the three versions (old, self and new)
	and attempt to bring the receiver up to date with newVersion,
	whilst maintaining changes from oldVersion.

	Return true if the receiver was able to resolve the conflict, false otherwise.
	Default - just return false

	Note that, in order to avoid disrupting the transaction commit mechanism,
	this method is always called the error-trapped safeHandleUpdateClash:...
	and so will never cause a walkback - a notification will be logged however"

	^false!

hasChanged

	"Return whether the receiver or its related objects have changed in the image since loading from the ReStore instance in which they reside"

	^(self _reStoreIfNone: ["Not (yet) persistent" ^true]) hasChanged: self withRelatedComponents!

isDBDeleted

	^false!

isDBProxy

	"Differentiate between proxys and actual objects"

	^false!

isPersistent

	^(self _dbProxyIfNone: [nil]) notNil!

isValidForPersistence

	"Return a Boolean indicating whether the receiver is a valid object for persistent storage.
	Default - the basic types (Numbers, Strings etc.) are so valid"
	
	^self class isPersistentBaseClass!

mergeUpdate: aSymbol from: anObject

	"Transaction commit concurrent update resolution:
	The inst var of the receiver named aSymbol has changed in anObject (another version of the receiver).
	The receiver itself has NOT changed this inst var, but has changed other inst var(s).

	Handle the change and return whether a Boolean indicating if is was successfully handled,
	e.g. always return false to turn off auto merging.
	OR return nil to accept default handling (merge the change into the receiver)"

	^nil!

mergeUpdateFrom: newVersion newValue: newValue accessor: anInstVarAccessor

	"Private - Transaction commit concurrent update resolution:
	The value of inst var of the receiver accessed by anInstVarAccessor has been changed 
	to newValue in newVersion (a new version of the receiver from the database).
	The receiver itself has NOT changed this inst var, but has changed other inst var(s).

	Handle the change and return whether is was successfully handled.
	Default handling is just to merge the change into the receiver"

	"This method is essentially private; pass to a simplified handler which subclasses can override"
	^(self mergeUpdate: anInstVarAccessor name from: newVersion) ifNil: 
		["Default handling"
		anInstVarAccessor value: newValue in: self.
		true]!

onAboutToUnstore

	"The receiver is about to be unstored from its ReStore container - carry out any necessary actions.
	Note in the event of a commit failure (e.g. update clash) the unstore may be rolled back.
	Use onUnstored for definite confirmation of a completed unstore"!

onRefresh

	"Carry out any actions necessary following refreshing this Object from the database.
	Default - do nothing"!

onRollback

	"Carry out any actions necessary following rolling back this object to its state prior to the current transaction.
	Default - do nothing"
!

onUnstored

	"The receiver has been unstored from the database.
	Carry out any necessary actions"!

refresh

	"Refresh the receiver and its related objects to their stored state"

	(self _reStoreIfNone: [self errorNotPersistent]) refresh: self withRelatedComponents!

reStoreValue

	"Return an object to use to represent the receiver in ReStore.
	Default - use the receiver, or unique ID if not directly valid for persistence.
	May be overriden where requirements differ"
	
	^self isValidForPersistence 
		ifTrue: [self] 
		ifFalse: [self _id reStoreValue]!

rollback

	"Rollback the receiver and its related objects to their previous state"

	(self _reStoreIfNone: [self errorNotPersistent]) rollback: self withRelatedComponents!

safeHandleUpdateClash: aSymbol from: oldVersion to: newVersion

	"Private - Error-trapped entrypoint for handleUpdateClash:from:to:
	Trap any error during the clash resolution and re-raise as a notification"

	| result |

	result := 
		[self handleUpdateClash: aSymbol from: oldVersion to: newVersion]
			on:	Error
			do:	[ :exc | 
				exc resignalAs: 
					(Notification new messageText: 
						('Error: ', exc description, 
						' signalled during #handleUpdateClash:from:to: for ',
						([self debugPrintString] 
							on: Error do: [:e | 'an invalid ', self basicClass name])))].

	^result = true!

safeMergeUpdateFrom: newVersion newValue: anObject accessor: anInstVarAccessor

	"Private - Error-trapped entrypoint for mergeUpdateFrom:newValue:accessor:
	Trap any error during the merge and re-raise as a notification"

	| result |

	result := 
		[self mergeUpdateFrom: newVersion newValue: anObject accessor: anInstVarAccessor]
			on:	Error
			do:	[ :exc | 
				exc resignalAs: 
					(Notification new messageText: 
						('Error: ', exc description, 
						' signalled during #mergeUpdateFrom:newValue:accessor: for ',
						([self debugPrintString] 
							on: Error do: [:e | 'an invalid ', self basicClass name])))].

	^result = true!

similarInstances

	^self similarInstancesIn: SSWReStore default!

similarInstancesIn: aReStore

	"Return an InstancesCollection representing those persistent instances
	which are similar to the receiver (a 'template' instance)"

	| instances |

	instances := aReStore instancesOf: self class.
	self qualify: instances in: aReStore via: OrderedCollection new.

	^instances!

store

	"Store the receiver and its related objects in the ReStore instance in which they reside (or the default if not currently persistent); return success.
	In the event of a failure the default action is to abandon the failed transaction leaving the receiver in its current state. 
	To handle transaction failure manually (e.g. to rollback and refresh) trap StoreFailure"

	^self storeIn: (self _reStoreIfNone: [SSWReStore default])!

storeIn: aReStore

	"Store the receiver and its related objects in aReStore; return success.
	In the event of a failure the default action is to abandon the failed transaction leaving the receiver in its current state. 
	To handle transaction failure manually (e.g. to rollback and refresh) trap StoreFailure.

	NB: This is also a legacy selector whose meaning was 'store in the active transaction'.
	We have repurposed this to also be a direct 'store now' message, which begins and completes in its own transaction.
	Accomodate both new and legacy behavior by checking if there is currently a transaction in progress"

	^(aReStore isTransactionInProgress and: [(self _dbProxyIn: aReStore ifNone: [nil]) isNil])
	ifTrue: 
		[self storeInAnsweringProxy: aReStore.
		self]
	ifFalse:
		[(aReStore commit: self withRelatedComponents)
			ifTrue: [true]
			ifFalse: [StoreFailure signalWith: aReStore. false]]!

storeInAnsweringProxy: anSSWReStore

	"Store the receiver object as a new persistent object in anSSWReStore.
	Return the new proxy (intended for privileged code only)"
	
	^(anSSWReStore createProxyForNewObject: self)
		_referenced;
		yourself!

unstore

	"Unstore the receiver and its dependent objects from the ReStore in which they reside.

	NB: This is also a legacy selector whose meaning was 'unstore in the active transaction'.
	We have repurposed this to also be a direct 'unstore now' message, which begins and completes in its own transaction.

	Accomodate both new and legacy behavior by checking if there is currently a transaction in progress"

	^(self _dbProxyIfNone: [nil]) ifNotNil: 
		[ :proxy |
		proxy _reStore isTransactionInProgress 
			ifTrue: [proxy _unstore "Legacy"]
			ifFalse: [self unstored store] "New behavior"]!

unstored

	"Return the receiver in an UnstoreWrapper"

	^SSWDBUnstoreWrapper on: self!

withComponents

	^SSWDBObjectWithComponents on: self!

withRelatedComponents

	^SSWDBObjectWithRelatedComponents on: self!

writeSQLOn: aStream

	"Defer to printOn: by default"
	^self printOn: aStream! !
!Object categoriesFor: #_changedObjectsIn:!private!restore-internal! !
!Object categoriesFor: #_checkHasChangedIn:!private!restore-internal! !
!Object categoriesFor: #_commitIn:!private!restore-internal! !
!Object categoriesFor: #_dbProxy!private!restore-internal! !
!Object categoriesFor: #_dbProxyIfNone:!private!restore-internal! !
!Object categoriesFor: #_dbProxyIn:!private!restore-internal! !
!Object categoriesFor: #_dbProxyIn:ifNone:!private!restore-internal! !
!Object categoriesFor: #_ensureActiveIn:!private!restore-internal! !
!Object categoriesFor: #_ensurePersistentIn:!private!restore-internal! !
!Object categoriesFor: #_forceRefreshIn:!private!restore-internal! !
!Object categoriesFor: #_forceRefreshWithContents!private!restore-internal! !
!Object categoriesFor: #_hasChangedFrom:!public!restore-internal! !
!Object categoriesFor: #_id!private!restore-internal! !
!Object categoriesFor: #_idIn:!private!restore-internal! !
!Object categoriesFor: #_isRecovered!private!restore-internal! !
!Object categoriesFor: #_refreshIfUpdatedIn:!private!restore-internal! !
!Object categoriesFor: #_refreshIn:!private!restore-internal! !
!Object categoriesFor: #_refreshWithContents!private!restore-internal! !
!Object categoriesFor: #_refreshWithContentsIfUpdated!private!restore-internal! !
!Object categoriesFor: #_reStore!private!restore-internal! !
!Object categoriesFor: #_reStoreIfNone:!private!restore-internal! !
!Object categoriesFor: #_rollbackIn:!private!restore-internal! !
!Object categoriesFor: #_touch!private!restore-internal! !
!Object categoriesFor: #errorNotPersistent!exceptions!public! !
!Object categoriesFor: #handleUpdateClash:from:to:!public!restore-update clash handling! !
!Object categoriesFor: #hasChanged!public!restore-api!testing! !
!Object categoriesFor: #isDBDeleted!public!restore-internal! !
!Object categoriesFor: #isDBProxy!private!restore-internal! !
!Object categoriesFor: #isPersistent!public!restore-api!testing! !
!Object categoriesFor: #isValidForPersistence!private!restore-internal! !
!Object categoriesFor: #mergeUpdate:from:!public!restore-update clash handling! !
!Object categoriesFor: #mergeUpdateFrom:newValue:accessor:!private!restore-update clash handling! !
!Object categoriesFor: #onAboutToUnstore!public!restore-event handling! !
!Object categoriesFor: #onRefresh!public!restore-event handling! !
!Object categoriesFor: #onRollback!public!restore-event handling! !
!Object categoriesFor: #onUnstored!public!restore-event handling! !
!Object categoriesFor: #refresh!public!restore-api! !
!Object categoriesFor: #reStoreValue!public!restore-internal! !
!Object categoriesFor: #rollback!public!restore-api! !
!Object categoriesFor: #safeHandleUpdateClash:from:to:!private!restore-update clash handling! !
!Object categoriesFor: #safeMergeUpdateFrom:newValue:accessor:!private!restore-update clash handling! !
!Object categoriesFor: #similarInstances!public!restore-querying! !
!Object categoriesFor: #similarInstancesIn:!public!restore-querying! !
!Object categoriesFor: #store!public!restore-api! !
!Object categoriesFor: #storeIn:!public!restore-api! !
!Object categoriesFor: #storeInAnsweringProxy:!private!restore-internal! !
!Object categoriesFor: #unstore!public!restore-api! !
!Object categoriesFor: #unstored!public!restore-internal! !
!Object categoriesFor: #withComponents!public!restore-internal! !
!Object categoriesFor: #withRelatedComponents!public!restore-internal! !
!Object categoriesFor: #writeSQLOn:!public!restore-internal! !

!Object class methodsFor!

instanceFromDBValue: aValue in: anSSWReStore

	"Return an instance of the receiver class that is specified by the given value/ReStore combination.
	Default implementation for persistent application classes - query the ReStore for the relevant instance.
	Base classes (Integer, String etc.) should reimplement as appropriate"
	
	^aValue isNil
		ifTrue: [nil]
		ifFalse: [anSSWReStore deferredObjectOfClass: self withID: aValue]!

preferredObjectProxyClass 

	"If the receiver needs a specific proxy class, return this else nil"

	^nil!

storedInstances

	"Return all instances of the receiver stored in the database accessed by the default ReStore"

	^self storedInstancesIn: SSWReStore default!

storedInstancesIn: aReStore

	"Return all instances of the receiver stored in the database accessed by aReStore"

	^aReStore instancesOf: self! !
!Object class categoriesFor: #instanceFromDBValue:in:!instance creation!public! !
!Object class categoriesFor: #preferredObjectProxyClass!persistency!public! !
!Object class categoriesFor: #storedInstances!persistency!public! !
!Object class categoriesFor: #storedInstancesIn:!persistency!public! !

!Process methodsFor!

reStore

	"Return the affiliated ReStore instance for this process.
	If no explicit affiliation the global default is used"

	^(SSWReStore affiliateFor: self) ifNil: [SSWReStore globalDefault]!

reStore: aReStoreOrNil

	"Set aReStore(OrNil) as the affiliated instance in this process.
	If nil any current affiliation is removed and the global default is assumed"

	aReStoreOrNil isNil 
		ifTrue: [(SSWReStore affiliateFor: self) ifNotNil: [ :reStore | reStore disaffiliateWith: self]]
		ifFalse: [aReStoreOrNil affiliateWith: self using: [ :proc | Processor activeProcess == proc]]! !
!Process categoriesFor: #reStore!accessing!public! !
!Process categoriesFor: #reStore:!accessing!public! !

!SSWDBClassWithInfo methodsFor!

instanceFromDBValue: aValue in: aReStore

	^self infoClass instanceFromDBValue: aValue in: aReStore! !
!SSWDBClassWithInfo categoriesFor: #instanceFromDBValue:in:!instance creation!public! !

!SSWDBDateAndTimeWithResolution methodsFor!

instanceFromDBValue: aValue in: aReStore

	^aValue ifNotNil: [(self infoClass instanceFromDBValue: aValue in: aReStore) withResolution: self resolution]! !
!SSWDBDateAndTimeWithResolution categoriesFor: #instanceFromDBValue:in:!instance creation!public! !

!SSWDBGeneralCollectionSpec methodsFor!

collectionProxyClass

	^SSWDBGeneralCollectionProxy! !
!SSWDBGeneralCollectionSpec categoriesFor: #collectionProxyClass!constants!public! !

!SSWDBOwnedCollectionSpec methodsFor!

collectionProxyClass

	^SSWDBOwnedCollectionProxy! !
!SSWDBOwnedCollectionSpec categoriesFor: #collectionProxyClass!constants!public! !

!SSWDBScaledDecimalWithInfo methodsFor!

instanceFromDBValue: aValue in: aReStore

	"Handle SQL dialects which do not explicity support decimals"

	| scaleFactor |

	(aValue isNil or: [aValue isKindOf: ScaledDecimal]) ifTrue: [^aValue].

	"Convert to a ScaledDecimal, rounding to the scale of the receiver"
	scaleFactor := 10 ** self scale.

	^(ScaledDecimal newFromNumber: (aValue * scaleFactor) rounded scale: self scale) / scaleFactor! !
!SSWDBScaledDecimalWithInfo categoriesFor: #instanceFromDBValue:in:!instance creation!public! !

!SSWDBTable methodsFor!

tableRecord

	^SSWDBTableRecord new
		tableName: self name; 
		fullTableName: self fullName;
		nextID: 1;
		yourself!

versionControlField

	^self controlFields detect: [ :each | each accessor specialSymbol = #_version]!

withIDAndVersionFields

	"Return a copy of the receiver table but containing only the id and version fields"
	
	| withControlFields |

	withControlFields := SSWDBTable new.

	^withControlFields
		reStore: self reStore;
		name: self name;
		fullName: self fullName;
		idField: self idField;
		controlFields: (Array with: self versionControlField);
		yourself! !
!SSWDBTable categoriesFor: #tableRecord!evaluating!public! !
!SSWDBTable categoriesFor: #versionControlField!evaluating!public! !
!SSWDBTable categoriesFor: #withIDAndVersionFields!evaluating!public! !

!String methodsFor!

withComponents

	"Treat as an object, not a collection"

	^SSWDBObjectWithComponents on: self!

withRelatedComponents

	"Treat as an object, not a collection"

	^SSWDBObjectWithRelatedComponents on: self! !
!String categoriesFor: #withComponents!converting!public! !
!String categoriesFor: #withRelatedComponents!converting!public! !

!String class methodsFor!

instanceFromDBValue: aValue in: anSSWReStore

	"ASSERT: aValue isNil OR aValue isKindOf: self"

	^aValue! !
!String class categoriesFor: #instanceFromDBValue:in:!instance creation!public! !

!Time class methodsFor!

instanceFromDBValue: aValue in: anSSWReStore

	"aValue may be some other object which can convert itself to a Time"
	
	^(aValue isNil or: [aValue class = Time])
		ifTrue: [aValue]
		ifFalse: [anSSWReStore sqlDialect timeFrom: aValue]! !
!Time class categoriesFor: #instanceFromDBValue:in:!instance creation!private! !

!UndefinedObject methodsFor!

storeIn: anSSWReStore

	"Do nothing - cannot store an UndefinedObject"!

unstore

	"Do nothing - cannot store/unstore an UndefinedObject"! !
!UndefinedObject categoriesFor: #storeIn:!converting!public! !
!UndefinedObject categoriesFor: #unstore!converting!public! !

"End of package definition"!

