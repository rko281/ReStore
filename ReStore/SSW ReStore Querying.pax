| package |
package := Package name: 'SSW ReStore Querying'.
package paxVersion: 1;
	basicComment: 'ReStore
©2019 John Aspinall
https://github.com/rko281/ReStore'.


package classNames
	add: #ConcatenatedCollection;
	add: #RequiredUndefinedObject;
	add: #SSWDBBlockArgument;
	add: #SSWDBBlockEvaluator;
	add: #SSWDBBlockParser;
	add: #SSWDBBlockReceiver;
	add: #SSWDBCollectionBlockReceiver;
	add: #SSWDBDumbArgument;
	add: #SSWDBForwardOnlyReadStream;
	add: #SSWDBGeneralCollectionBlockReceiver;
	add: #SSWDBInlinedBlockReceiver;
	add: #SSWDBInstancesCollection;
	add: #SSWDBOwnedCollectionBlockReceiver;
	add: #SSWDBParseError;
	add: #SSWDBQueryCondition;
	add: #SSWDBQueryConditionCollection;
	add: #SSWDBQueryFieldCollection;
	add: #SSWDBQueryIDField;
	add: #SSWDBReadStream;
	add: #WildcardString;
	yourself.

package methodNames
	add: #Boolean -> #asSQLConditions;
	add: #Class -> #isPersistentIn:;
	add: #DeafObject -> #_id;
	add: #Object -> #||;
	add: #Object -> #concatenatedWith:;
	add: #Object -> #forConcatenation;
	add: #Object -> #imageDo:databaseDo:;
	add: #Object -> #isRequiredForSimilarity;
	add: #Object -> #isSimilarTo:;
	add: #Object -> #qualify:in:via:;
	add: #Object -> #similarityComparator;
	add: #SSWDBClassWithInfo -> #isPersistentIn:;
	add: #SSWDBCollectionSpec -> #dbBlockCollectionReceiver;
	add: #SSWDBFunctionField -> #forConcatenation;
	add: #SSWDBGeneralCollectionSpec -> #dbBlockCollectionReceiver;
	add: #SSWDBOwnedCollectionSpec -> #dbBlockCollectionReceiver;
	add: #SSWDBQueryField -> #asSQLFields;
	add: #SSWSQLCondition -> #convertValue:;
	add: #SSWSQLCondition -> #fieldNamed:;
	add: #SSWSQLCondition -> #finalField;
	add: #SSWSQLCondition -> #hasFinalField;
	add: #SSWSQLCondition -> #requiresAliasing;
	add: #SSWSQLCondition -> #table;
	add: #SSWSQLCondition -> #writeAliasedSQLOn:;
	add: #SSWSQLConditionCollection -> #convertValue:;
	add: #SSWSQLConditionCollection -> #fieldNamed:;
	add: #SSWSQLConditionCollection -> #finalField;
	add: #SSWSQLConditionCollection -> #hasFinalField;
	add: #SSWSQLConditionCollection -> #requiresAliasing;
	add: #SSWSQLConditionCollection -> #writeAliasedSQLOn:;
	add: #SSWSQLParameterField -> #asSQLFields;
	add: #SSWSQLParameterField -> #hasAggregateFunction;
	add: #String -> #asWildcard;
	add: #UndefinedObject -> #isRequiredForSimilarity;
	add: #UndefinedObject -> #required;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'SSW ReStore Base Additions'
	'SSW ReStore Collections'
	'SSW ReStore SQL Entities'
	'SSW ReStore SQL Queries'
	'SSW ReStore Tables').

package!

"Class Definitions"!

Object subclass: #RequiredUndefinedObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: 'soleInstance'!
Object subclass: #SSWDBBlockParser
	instanceVariableNames: 'reStore argumentClass argumentTable referencedTables qualifyingConditions qualifyingTables orderingSpecs groupByFields activeReceiver isCollectingAssociations fieldEncounters'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #SSWDBDumbArgument
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: 'current'!
Object subclass: #SSWDBInstancesCollection
	instanceVariableNames: 'reStore instancesClass parser sortBlock preReadActions postReadActions'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Object subclass: #WildcardString
	instanceVariableNames: 'string'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
OrderedCollection variableSubclass: #ConcatenatedCollection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWSQLConditionCollection variableSubclass: #SSWDBQueryConditionCollection
	instanceVariableNames: 'parser blockEndpoint postCondition'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWSQLFieldCollection variableSubclass: #SSWDBQueryFieldCollection
	instanceVariableNames: 'parser'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Error subclass: #SSWDBParseError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBQueryTableField subclass: #SSWDBQueryIDField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWSQLCondition subclass: #SSWDBQueryCondition
	instanceVariableNames: 'parser'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
PositionableStream subclass: #SSWDBReadStream
	instanceVariableNames: 'instancesCollection peeked'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBReadStream subclass: #SSWDBForwardOnlyReadStream
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBProtoObject subclass: #SSWDBBlockEvaluator
	instanceVariableNames: 'parser'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBBlockEvaluator subclass: #SSWDBBlockArgument
	instanceVariableNames: 'currentClass isForModify finalFields'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBBlockEvaluator subclass: #SSWDBCollectionBlockReceiver
	instanceVariableNames: 'collectionSpec collection currentMode'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBBlockArgument subclass: #SSWDBBlockReceiver
	instanceVariableNames: 'currentTable path'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBBlockArgument subclass: #SSWDBInlinedBlockReceiver
	instanceVariableNames: 'inlinedInstVar inlinedFields'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCollectionBlockReceiver subclass: #SSWDBGeneralCollectionBlockReceiver
	instanceVariableNames: 'intermediateCollection'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWDBCollectionBlockReceiver subclass: #SSWDBOwnedCollectionBlockReceiver
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!Boolean methodsFor!

asSQLConditions

	"Received following a query block similar to [ :each | true]"

	"Always true = no conditions"
	^SSWSQLConditionCollection forAND! !
!Boolean categoriesForMethods!
asSQLConditions!converting!public! !
!

!Class methodsFor!

isPersistentIn: anSSWReStore

	^anSSWReStore isClassPersistent: self! !
!Class categoriesForMethods!
isPersistentIn:!private!testing! !
!

!DeafObject methodsFor!

_id

	^self! !
!DeafObject categoriesForMethods!
_id!accessing!public! !
!

!Object methodsFor!

|| anObject

	"Concatenate the receiver with anObject, returning the resulting collection"

	^anObject concatenatedWith: (ConcatenatedCollection with: self)!

concatenatedWith: aConcatenatedCollection

	^aConcatenatedCollection 
		addLast: self; 
		yourself!

forConcatenation

	^self!

imageDo: imageBlock databaseDo: databaseBlock

	"Allow different code to be 'evaluated' depending on whether execution is in-image or 'in' the database (in the latter case code is not actually executed but converted to SQL)"

	^imageBlock value!

isRequiredForSimilarity

	"Private - Is this object required to be similar when testing similarity of its owner?"
	^true!

isSimilarTo: anObject

	^self perform: anObject similarityComparator with: anObject!

qualify: instances in: aReStore via: aCollection

	(aReStore tableForClass: self class) allDataFieldsDo:
		[ :field || value |
		value := field accessor valueIn: self.
		value isRequiredForSimilarity ifTrue:
			[| accessor chain |
			accessor := field accessor.
			chain := aCollection copyWith: accessor name.
			[accessor isInlined] whileTrue: 
				[accessor := accessor inlinedAccessor.
				chain := chain copyWith: accessor name].
			(field targetClass isPersistentIn: aReStore)
			ifTrue: 
				[(value _dbProxyIfNone: [nil])
					ifNil: [value qualify: instances in: aReStore via: chain]
					ifNotNil: [ :proxy | instances qualifyWith: [ :each | (each chainPerform: chain) _id = proxy _id]]]
			ifFalse: 
				[instances qualifyWith: [ :each | (each chainPerform: chain) isSimilarTo: value]]]]!

similarityComparator

	"Private - Default is equality"

	^#=! !
!Object categoriesForMethods!
||!converting!public! !
concatenatedWith:!double dispatch!private! !
forConcatenation!public!restore-querying! !
imageDo:databaseDo:!public!restore-querying! !
isRequiredForSimilarity!private!testing! !
isSimilarTo:!public!testing! !
qualify:in:via:!actions!private! !
similarityComparator!constants!private! !
!

!SSWDBClassWithInfo methodsFor!

isPersistentIn: anSSWReStore

	"Required class-like behavior"

	^false! !
!SSWDBClassWithInfo categoriesForMethods!
isPersistentIn:!private!testing! !
!

!SSWDBCollectionSpec methodsFor!

dbBlockCollectionReceiver

	"Return a block receiver object suitable for parsing (mainly) subqueries involving the receiver"

	^self subclassResponsibility! !
!SSWDBCollectionSpec categoriesForMethods!
dbBlockCollectionReceiver!accessing!public! !
!

!SSWDBFunctionField methodsFor!

forConcatenation

	^SSWDBQueryConditionCollection with: self! !
!SSWDBFunctionField categoriesForMethods!
forConcatenation!converting!public! !
!

!SSWDBGeneralCollectionSpec methodsFor!

dbBlockCollectionReceiver

	"Return a block receiver object suitable for parsing (mainly) subqueries involving the receiver"

	^SSWDBGeneralCollectionBlockReceiver new
		collectionSpec: self;
		yourself! !
!SSWDBGeneralCollectionSpec categoriesForMethods!
dbBlockCollectionReceiver!accessing!public! !
!

!SSWDBOwnedCollectionSpec methodsFor!

dbBlockCollectionReceiver

	"Return a block receiver object suitable for parsing (mainly) subqueries involving the receiver"

	^SSWDBOwnedCollectionBlockReceiver new
		collectionSpec: self;
		yourself! !
!SSWDBOwnedCollectionSpec categoriesForMethods!
dbBlockCollectionReceiver!accessing!public! !
!

!SSWDBQueryField methodsFor!

asSQLFields

	^self! !
!SSWDBQueryField categoriesForMethods!
asSQLFields!converting!public! !
!

!SSWSQLCondition methodsFor!

convertValue: aValue

	"For situations where a condition is being used as a result field in a query.
	Since the receiver is a condition, its result must be a Boolean"

	^Boolean instanceFromDBValue: aValue in: self field table reStore!

fieldNamed: aString

	"Polymorphic with SSWDBField; used when collect: queries have a condition as a result field, e.g. object cancelDate notNil"

	^self field fieldNamed: aString!

finalField

	"Polymorphic with SSWDBBlockEvaluator; used when collect: queries have a condition as a result field, e.g. object cancelDate notNil"

	^self!

hasFinalField

	"Polymorphic with SSWDBBlockEvaluator; used when collect: queries have a condition as a result field, e.g. object cancelDate notNil"

	^true!

requiresAliasing

	"Polymorphic with SSWDBField; used when collect: queries have a condition as a result field, e.g. object cancelDate notNil"

	^false!

table

	"Polymorphic with SSWDBField; used when collect: queries have a condition as a result field, e.g. object cancelDate notNil"

	^self field table!

writeAliasedSQLOn: aStream

	"For situations where a condition is being used as a result field in a query"

	aStream nextPutAliasedField: self! !
!SSWSQLCondition categoriesForMethods!
convertValue:!output!public! !
fieldNamed:!accessing!public! !
finalField!accessing!public! !
hasFinalField!public!testing! !
requiresAliasing!public!testing! !
table!accessing!public! !
writeAliasedSQLOn:!output!public! !
!

!SSWSQLConditionCollection methodsFor!

convertValue: aValue

	"For situations where a condition is being used as a result field in a query.
	Since the receiver is a condition, its result must be a Boolean"

	^Boolean instanceFromDBValue: aValue in: self first field table reStore!

fieldNamed: aString

	"Polymorphic with SSWDBField; used when collect: queries have a condition as a result field, e.g. object cancelDate notNil"

	^self !

finalField

	"Polymorphic with SSWDBBlockEvaluator; used when collect: queries have a condition as a result field, e.g. object cancelDate notNil"

	^self!

hasFinalField

	"Polymorphic with SSWDBBlockEvaluator; used when collect: queries have a condition as a result field, e.g. object cancelDate notNil"

	^true!

requiresAliasing

	"Polymorphic with SSWDBField; used when collect: queries have a condition as a result field, e.g. object cancelDate notNil"

	^false!

writeAliasedSQLOn: aStream

	"For situations where a condition is being used as a result field in a query"

	aStream nextPutAliasedField: self! !
!SSWSQLConditionCollection categoriesForMethods!
convertValue:!output!public! !
fieldNamed:!accessing!public! !
finalField!accessing!public! !
hasFinalField!public!testing! !
requiresAliasing!public!testing! !
writeAliasedSQLOn:!output!public! !
!

!SSWSQLParameterField methodsFor!

asSQLFields

	^self!

hasAggregateFunction

	^false! !
!SSWSQLParameterField categoriesForMethods!
asSQLFields!converting!public! !
hasAggregateFunction!public!testing! !
!

!String methodsFor!

asWildcard

	^WildcardString new
		string: self;
		yourself
! !
!String categoriesForMethods!
asWildcard!converting!public! !
!

!UndefinedObject methodsFor!

isRequiredForSimilarity

	"Private - nil (as in unset) not required for similarity. Use 'nil required' instead"

	^false!

required

	"Return the 'required nil' object"

	^RequiredUndefinedObject soleInstance! !
!UndefinedObject categoriesForMethods!
isRequiredForSimilarity!private!testing! !
required!accessing!public! !
!

"End of package definition"!

