| package |
package := Package name: 'SSW ReStore Tables'.
package paxVersion: 1;
	basicComment: 'ReStore
©2019 John Aspinall
https://github.com/rko281/ReStore'.

package basicPackageVersion: '2.11'.

package classNames
	add: #SSWAccessor;
	add: #SSWDBAbstractSubTable;
	add: #SSWDBClassAccessor;
	add: #SSWDBClassDefinition;
	add: #SSWDBControlField;
	add: #SSWDBDataField;
	add: #SSWDBDependentWrapper;
	add: #SSWDBDirectlyPersistedObject;
	add: #SSWDBField;
	add: #SSWDBFunctionField;
	add: #SSWDBIDAccessor;
	add: #SSWDBIDField;
	add: #SSWDBInheritedTable;
	add: #SSWDBInlinedClass;
	add: #SSWDBInstVarDefinition;
	add: #SSWDBInstVarWithFieldName;
	add: #SSWDBIntermediateTable;
	add: #SSWDBNonParameterizedControlField;
	add: #SSWDBPrivateAccessor;
	add: #SSWDBQueryField;
	add: #SSWDBQueryTable;
	add: #SSWDBQueryTableField;
	add: #SSWDBRelatedWrapper;
	add: #SSWDBRenamedInstVar;
	add: #SSWDBStaticField;
	add: #SSWDBSubTable;
	add: #SSWDBSuperTable;
	add: #SSWDBTable;
	add: #SSWDBTableComponent;
	add: #SSWDBUnrelatedWrapper;
	add: #SSWDBVersionAccessor;
	add: #SSWFieldInliner;
	add: #SSWInlinedInstVarAccessor;
	add: #SSWInstVarAccessor;
	add: #SSWMutableInstVarAccessor;
	add: #SSWTransformingInstVarAccessor;
	yourself.

package methodNames
	add: #Class -> #defineAs:in:;
	add: #Class -> #inlined;
	add: #Object -> #convertValue:;
	add: #Object -> #dependent;
	add: #Object -> #related;
	add: #Object -> #targetClass;
	add: #Object -> #unrelated;
	add: #SSWDBClassWithInfo -> #defineAs:in:;
	add: #SSWDBClassWithInfo -> #reStoreInstVarAccessorIn:;
	add: #SSWDBClassWithInfo -> #reStoreValueClass;
	add: #SSWDBClassWithInfo -> #shouldInlinePersistency;
	add: #SSWSQLCondition -> #columnIndex:;
	add: #SSWSQLCondition -> #copyForQueryTable:;
	add: #SSWSQLConditionCollection -> #columnIndex:;
	add: #SSWSQLConditionCollection -> #copyForQueryTable:;
	add: #SSWSQLDialect -> #instVarAccessorFor:;
	add: #SSWSQLJoinedTableCollection -> #add:joinedWithField:;
	add: #SSWSQLJoinedTableCollection -> #addAliasingDuplicates:joinedWithField:;
	add: #SSWSQLJoinedTableCollection -> #joinFields;
	add: #SSWSQLJoinedTableCollection -> #lastJoinField;
	add: #SSWSQLParameterField -> #columnIndex:;
	add: #SSWSQLTableCollection -> #occurrencesOfIncludingRepetitions:;
	add: #Symbol -> #asInstVarName;
	add: #Symbol -> #databaseFieldNameIn:;
	add: #Symbol -> #previouslyNamed:;
	add: #Symbol -> #withDatabaseName:;
	add: 'Integer class' -> #reStoreNewUnique;
	add: 'Object class' -> #addClassDefinitionTo:;
	add: 'Object class' -> #hasOwnReStoreDefinition;
	add: 'Object class' -> #hasPersistentSuperclass;
	add: 'Object class' -> #isPersistencyInherited;
	add: 'Object class' -> #persistencyRootClass;
	add: 'Object class' -> #reStoreDefinition;
	add: 'Object class' -> #reStoreIDClass;
	add: 'Object class' -> #reStoreInstVarAccessor;
	add: 'Object class' -> #reStoreInstVarAccessorIn:;
	add: 'Object class' -> #reStoreNewUnique;
	add: 'Object class' -> #reStoreTableClass;
	add: 'Object class' -> #reStoreValueClass;
	add: 'Object class' -> #shouldInheritPersistency;
	add: 'Object class' -> #shouldInlinePersistency;
	add: 'Object class' -> #shouldSubclassesInheritPersistency;
	add: 'Object class' -> #subclassesInheritingPersistency;
	add: 'Object class' -> #tableIn:;
	add: 'String class' -> #reStoreInstVarAccessorIn:;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'SSW ReStore Base Additions'
	'SSW ReStore SQL Entities'
	'SSW ReStore SQL Queries').

package!

"Class Definitions"!

Object subclass: #SSWAccessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #SSWDBClassDefinition
	instanceVariableNames: 'definedClass instVarDefinitions tableName idInstVar namespace'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #SSWDBDirectlyPersistedObject
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #SSWDBInstVarDefinition
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #SSWDBQueryField
	instanceVariableNames: 'field columnIndex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #SSWDBQueryTable
	instanceVariableNames: 'table repetitionIndex allFields'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

Object subclass: #SSWFieldInliner
	instanceVariableNames: 'table instanceClass inlinedName inlinedSlot inlinedClass fields'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWAccessor subclass: #SSWDBPrivateAccessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWAccessor subclass: #SSWInstVarAccessor
	instanceVariableNames: 'ownerClass slot name'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBPrivateAccessor subclass: #SSWDBClassAccessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBPrivateAccessor subclass: #SSWDBIDAccessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBPrivateAccessor subclass: #SSWDBVersionAccessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWInstVarAccessor subclass: #SSWInlinedInstVarAccessor
	instanceVariableNames: 'inlinedAccessor inlinedClass'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWInstVarAccessor subclass: #SSWMutableInstVarAccessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWInstVarAccessor subclass: #SSWTransformingInstVarAccessor
	instanceVariableNames: 'transformation'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBClassWithInfo subclass: #SSWDBInlinedClass
	instanceVariableNames: 'inlinedClass'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBInstVarDefinition subclass: #SSWDBInstVarWithFieldName
	instanceVariableNames: 'fieldName'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBInstVarDefinition subclass: #SSWDBRenamedInstVar
	instanceVariableNames: 'previousName'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBQueryField subclass: #SSWDBFunctionField
	instanceVariableNames: 'function arguments'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBQueryField subclass: #SSWDBQueryTableField
	instanceVariableNames: 'table accessorPath'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBWrapper subclass: #SSWDBRelatedWrapper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBWrapper subclass: #SSWDBUnrelatedWrapper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBRelatedWrapper subclass: #SSWDBDependentWrapper
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWSQLTable subclass: #SSWDBTable
	instanceVariableNames: 'instanceClass fullName idField dataFields controlFields collectionSpecs abbreviations reStore insertStatement readStatement refreshStatement deleteStatement readAllBatchSize namespace'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBTable subclass: #SSWDBInheritedTable
	instanceVariableNames: 'classField'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBInheritedTable subclass: #SSWDBAbstractSubTable
	instanceVariableNames: 'rootClass classCondition'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBInheritedTable subclass: #SSWDBSuperTable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBAbstractSubTable subclass: #SSWDBIntermediateTable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBAbstractSubTable subclass: #SSWDBSubTable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWSQLTableComponent subclass: #SSWDBTableComponent
	instanceVariableNames: 'accessor readAllStatement'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBTableComponent subclass: #SSWDBField
	instanceVariableNames: 'name isDependent isRelated columnIndex'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBField subclass: #SSWDBStaticField
	instanceVariableNames: 'targetClass'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBStaticField subclass: #SSWDBControlField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBStaticField subclass: #SSWDBDataField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBStaticField subclass: #SSWDBIDField
	instanceVariableNames: 'dataField'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

SSWDBControlField subclass: #SSWDBNonParameterizedControlField
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Loose Methods"!

!Class methodsFor!

defineAs: aSymbol in: anSSWDBTable

	"The receiver has been specified as the kind of object held in inst var named aSymbol
	for the class whose DB table is anSSWDBTable.

	Add the receiver to anSSWDBTable returning the object created"

	^anSSWDBTable define: aSymbol asInstVarHolding: self!

inlined

	^SSWDBInlinedClass new
		inlinedClass: self;
		yourself! !

!Class categoriesForMethods!
defineAs:in:!accessing!public! !
inlined!accessing!public! !
!

!Integer class methodsFor!

reStoreNewUnique

	"Return nil to invoke default allocation of auto-incrementing Integer ID"

	^nil! !

!Integer class categoriesForMethods!
reStoreNewUnique!persistency!public! !
!

!Object methodsFor!

convertValue: aValue

	"Field behaviour; needed when the result of a function is a fixed value"

	^aValue!

dependent

	"Return a dependent version of the receiver"

	^SSWDBDependentWrapper on: self

!

related

	"Return a related version of the receiver"

	^SSWDBRelatedWrapper on: self

!

targetClass

	"Required when a static value (e.g. String, Number) is used in place of a field (e.g. in a SQL function)"

	^self class!

unrelated

	"Return an unrelated version of the receiver"

	^SSWDBUnrelatedWrapper on: self! !

!Object categoriesForMethods!
convertValue:!converting!public! !
dependent!defining!public! !
related!defining!public! !
targetClass!accessing!public! !
unrelated!defining!public! !
!

!Object class methodsFor!

addClassDefinitionTo: anSSWDBClassDefinition

	"Add the receiver's ReStore class definition to anSSWDBClassDefinition.
	In earlier versions of ReStore classes overrode this method; this is still supported however the new standard is to override reStoreDefinition instead"

	^self!

hasOwnReStoreDefinition

	"Return whether the receiver specifies a reStoreDefinition itself (i.e. not just inherited)"

	^(self class includesSelector: #reStoreDefinition) or: ["Backwards compatibility" self class includesSelector: #addClassDefinitionTo:]!

hasPersistentSuperclass

	"Return whether the receiver has a superclass from which it inherits some elements of persistence"

	self shouldInheritPersistency ifFalse: [^false].

	self allSuperclassesDo:
		[ :sup |
		sup = Object ifTrue: [^false].
		sup shouldSubclassesInheritPersistency ifFalse: [^false].
		sup hasOwnReStoreDefinition ifTrue: [^true]].

	^false!

isPersistencyInherited

	"Return whether the receiver's persistency is inherited by any subclasses"

	^self subclassesInheritingPersistency isEmpty not!

persistencyRootClass

	"Return the superclass at which the receiver's inherited persistency begins.
	ASSERT: self hasPersistentSuperclass"

	^self allSuperclasses detect: [ :sup | sup reStoreTableClass == SSWDBSuperTable]!

reStoreDefinition

	"Return anSSWDBClassDefinition setting out the details of how the receiver is to be persisted.
	Subclasses should override, adding the definition of their persistent inst vars to the result.

	In earlier versions of ReStore classes overrode addClassDefinition: to do this - this is still supported however the new standard is to override this method instead"

	| definition |

	definition := SSWDBClassDefinition forClass: self.

	self addClassDefinitionTo: definition.

	^definition!

reStoreIDClass

	"Return the class used as a unique ID in ReStore.
	Default is Integer, which ReStore auto-allocates if not explicitly set by application code (usually where unique ID is also application data).
	Other classes are supported; see instance method reStoreNewUniqueID"

	^Integer!

reStoreInstVarAccessor

	"Return a new inst var accessor to be used to access instances of this class in another object"

	^self isMutableDirectlyPersistedNonBaseClass
		ifTrue: [SSWMutableInstVarAccessor new]
		ifFalse: [SSWInstVarAccessor new]!

reStoreInstVarAccessorIn: aSQLDialect

	"Return a new inst var accessor to be used to access instances of this class in another object, in aSQLDialect"

	"Default - dialect is irrelevant"
	^self reStoreInstVarAccessor!

reStoreNewUnique

	"Return a new unique instance of the receiver to be used as a ReStore unique ID.
	See instance method reStoreNewUniqueID"

	"If we end up here something is wrong - see other implementors"
	^self shouldNotImplement!

reStoreTableClass

	"Deduce and return the correct class to use for the receiver's ReStore Table"

	^self hasPersistentSuperclass
	ifTrue: 
		[self isPersistencyInherited
			ifTrue: [SSWDBIntermediateTable]
			ifFalse: [SSWDBSubTable]]
	ifFalse:
		[self isPersistencyInherited
			ifTrue: [SSWDBSuperTable]
			ifFalse: [SSWDBTable]]!

reStoreValueClass

	"Return the class of object used to represent an instance of the receiver in the database, i.e. the class of the instance's reStoreValue"

	^self isPersistentBaseClass
		ifTrue: [self] "Usually"
		ifFalse: [self reStoreIDClass]!

shouldInheritPersistency

	"Return a Boolean indicating whether the receiver should inherit persistence
	information defined by its superclasses.
	
	By default, this is governed by the superclass implementation of shouldSubclassesInheritPersistence"

	^self superclass ~= nil and: [self superclass shouldSubclassesInheritPersistency]!

shouldInlinePersistency

	"Return whether this class should always be inlined when referenced from another class's reStoreDefinition"

	^false!

shouldSubclassesInheritPersistency

	"Return a Boolean indicating whether the receiver class' persistency 
	should be inherited by its subclasses.
	
	Default - true. Can be overriden if required.
	NB persistency-inheriting subclasses can implement shouldInheritPersistency
	to prevent (only) persistency inheritence if this method returns true"

	^true!

subclassesInheritingPersistency

	"Return a collection of those subclasses of the receiver class
	which are persistent and inherit the receiver's peristency - i.e. share a table"

	| inheritingPersistentSubclasses |

	self shouldSubclassesInheritPersistency ifFalse: [^#()].
	
	inheritingPersistentSubclasses := 
		(self subclasses select: [ :cls | cls isMeta not and: [cls shouldInheritPersistency]]) asOrderedCollection.
	
	inheritingPersistentSubclasses copy do: 
		[ :cls | 
		inheritingPersistentSubclasses addAll: cls subclassesInheritingPersistency].
	
	^inheritingPersistentSubclasses!

tableIn: anSSWReStore

	"Private - Create and return an SSWDB(XXX)Table to represent the receiver.
	Subclasses should *NOT* override this method;
	instead implement reStoreDefinition"

	^self reStoreDefinition asTableIn: anSSWReStore! !

!Object class categoriesForMethods!
addClassDefinitionTo:!persistency!public! !
hasOwnReStoreDefinition!persistency!public! !
hasPersistentSuperclass!persistency!public! !
isPersistencyInherited!persistency!public! !
persistencyRootClass!persistency!public! !
reStoreDefinition!persistency!public! !
reStoreIDClass!persistency!public! !
reStoreInstVarAccessor!persistency!public! !
reStoreInstVarAccessorIn:!persistency!public! !
reStoreNewUnique!persistency!public! !
reStoreTableClass!persistency!public! !
reStoreValueClass!persistency!public! !
shouldInheritPersistency!persistency!public! !
shouldInlinePersistency!persistency!public! !
shouldSubclassesInheritPersistency!persistency!public! !
subclassesInheritingPersistency!persistency!public! !
tableIn:!persistency!public! !
!

!SSWDBClassWithInfo methodsFor!

defineAs: aSymbol in: anSSWDBTable

	"The receiver has been specified as the kind of object held in inst var named aSymbol
	for the class whose DB table is anSSWDBTable.

	Add the receiver to anSSWDBTable returning the object created
	(the receiver is polymorphic with classes)"

	^anSSWDBTable define: aSymbol asInstVarHolding: self!

reStoreInstVarAccessorIn: aSQLDialect

	^self infoClass reStoreInstVarAccessorIn: aSQLDialect!

reStoreValueClass

	^self infoClass reStoreValueClass!

shouldInlinePersistency

	^false! !

!SSWDBClassWithInfo categoriesForMethods!
defineAs:in:!defining!public! !
reStoreInstVarAccessorIn:!public!testing! !
reStoreValueClass!public!testing! !
shouldInlinePersistency!public!testing! !
!

!SSWSQLCondition methodsFor!

columnIndex: anInteger

	"Polymorphic with SSWDBField"
	^self field columnIndex: anInteger!

copyForQueryTable: aQueryTable

	"Created for issue 120-015

	Return a copy of the receiver with the field changed to QueryTableFields assigned to aQueryTable"

	^self copy
		field: (SSWDBQueryTableField forField: self field in: aQueryTable);
		yourself
	! !

!SSWSQLCondition categoriesForMethods!
columnIndex:!accessing!public! !
copyForQueryTable:!evaluating!public! !
!

!SSWSQLConditionCollection methodsFor!

columnIndex: anInteger

	"Polymorphic with SSWDBField"!

copyForQueryTable: aQueryTable

	"Created for issue 120-015

	Return a copy of the receiver with all fields changed to QueryTableFields assigned to aQueryTable"

	^self collect: [ :each | each copyForQueryTable: aQueryTable]

	! !

!SSWSQLConditionCollection categoriesForMethods!
columnIndex:!accessing!public! !
copyForQueryTable:!copying!public! !
!

!SSWSQLDialect methodsFor!

instVarAccessorFor: aClass

	"Create and return an inst var accessor (instance of SSWInstVarAccessor or subclass)
	appropriate for accessing an inst var holding an instance of the the given class"

	"Special cases"
	((aClass includesBehavior: String) and: [self shouldMapEmptyStringsToNil]) ifTrue: 
		[^SSWTransformingInstVarAccessor newWithTransformation: (Message selector: #orNilIfEmpty)].

	"Default"
	^SSWInstVarAccessor new! !

!SSWSQLDialect categoriesForMethods!
instVarAccessorFor:!accessing!public! !
!

!SSWSQLJoinedTableCollection methodsFor!

add: anSSWDBTable joinedWithField: anSSWDBField

	"Patched for issue 120-001 (revised, replaces original patch)

	Add the given table joined with the given field (match on ID fields); return the table added.
	Duplicate entries are permitted - see withoutDuplicates"

	self add: anSSWDBTable joinedWith: (SSWSQLCondition field: anSSWDBTable idField equalTo: anSSWDBField)!

addAliasingDuplicates: anSSWDBTable joinedWithField: anSSWDBField

	"Add the given table joined with the given field; return the table added.
	Unlike add:joinedWith:, duplicate occurrences of anSSWDBTable are not permitted
	 - if anSSWDBTable already occurs in the receiver, then it is aliased"

	| repetition |

	repetition := self occurrencesOfIncludingRepetitions: anSSWDBTable.

	^repetition = 0 
		ifTrue: [self add: anSSWDBTable joinedWithField: anSSWDBField]
		ifFalse: [self add: (SSWDBQueryTable forRepetition: repetition of: anSSWDBTable) 	
					joinedWithField: anSSWDBField]!

joinFields

	| joinFields |

	joinFields := OrderedCollection new.
	self joinConditions isEmpty ifTrue: [^joinFields].

	self joinConditions flattened do: [ :each | (joinFields includes: each value) ifFalse: [joinFields add: each value]].

	^joinFields!

lastJoinField

	"Patched for issue 120-001(revised)"
	
	^self joinConditions last value! !

!SSWSQLJoinedTableCollection categoriesForMethods!
add:joinedWithField:!adding/removing!public! !
addAliasingDuplicates:joinedWithField:!adding/removing!public! !
joinFields!accessing!public! !
lastJoinField!accessing!public! !
!

!SSWSQLParameterField methodsFor!

columnIndex: anInteger

	"Polymorphic with SSWDBField"! !

!SSWSQLParameterField categoriesForMethods!
columnIndex:!accessing!private! !
!

!SSWSQLTableCollection methodsFor!

occurrencesOfIncludingRepetitions: aTable

	"Return the number of occurrences of the given table in the receiver.
	Include any previous repetitions, disguised as QueryTables"

	"Each table can appear only once as itself.
	If it does not appear once, then there are no repetitions"
	(self includes: aTable) ifFalse: [^0].

	^(self select: [ :table | (table class = SSWDBQueryTable) and: [table table == aTable]]) size + 1! !

!SSWSQLTableCollection categoriesForMethods!
occurrencesOfIncludingRepetitions:!public!searching! !
!

!String class methodsFor!

reStoreInstVarAccessorIn: aSQLDialect

	"Return a new inst var accessor to be used to access instances of this class in another object, in aSQLDialect"

	^aSQLDialect shouldMapEmptyStringsToNil 
		ifTrue: [SSWTransformingInstVarAccessor newWithTransformation: (Message selector: #orNilIfEmpty)]
		ifFalse: [super reStoreInstVarAccessorIn: aSQLDialect]! !

!String class categoriesForMethods!
reStoreInstVarAccessorIn:!persistency!public! !
!

!Symbol methodsFor!

asInstVarName

	^self!

databaseFieldNameIn: anSSWDBTable

	"Return the corresponding field name of the receiver in anSSWDBTable"

	^(SSWDBInstVarDefinition name: self) databaseFieldNameIn: anSSWDBTable!

previouslyNamed: aSymbol

	"Return an object representing the instance variable with the receiver's name, which was previously named aSymbol"

	^(SSWDBRenamedInstVar name: self)
		previousName: aSymbol;
		yourself!

withDatabaseName: aString

	"Return an object representing the instance variable with the receiver's name, which is to be mapped to a database field with the name aString"

	^(SSWDBInstVarWithFieldName name: self) 
		fieldName: aString;
		yourself! !

!Symbol categoriesForMethods!
asInstVarName!converting!public! !
databaseFieldNameIn:!converting!public! !
previouslyNamed:!converting!public! !
withDatabaseName:!converting!public! !
!

"End of package definition"!

